from flask import Flask, jsonify, request
import os
from datetime import datetime
import base64

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Vision API
vision_client = None
try:
    from google.cloud import vision
    import os
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GOOGLE_CREDENTIALS_CONTENT
    credentials_content = os.environ.get('GOOGLE_CREDENTIALS_CONTENT')
    if credentials_content:
        print("üîß –°–æ–∑–¥–∞—é credentials –∏–∑ GOOGLE_CREDENTIALS_CONTENT...")
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            f.write(credentials_content)
            temp_credentials_path = f.name
            print(f"üìù –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_credentials_path}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = temp_credentials_path
        vision_client = vision.ImageAnnotatorClient()
        print("‚úÖ Google Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ GOOGLE_CREDENTIALS_CONTENT!")
    else:
        print("‚ùå GOOGLE_CREDENTIALS_CONTENT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º GOOGLE_APPLICATION_CREDENTIALS
        credentials_path = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')
        if credentials_path and os.path.exists(credentials_path):
            print(f"‚úÖ Credentials —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {credentials_path}")
            vision_client = vision.ImageAnnotatorClient()
            print("‚úÖ Google Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        else:
            print("‚ùå GOOGLE_APPLICATION_CREDENTIALS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            vision_client = None
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Vision: {e}")
    import traceback
    traceback.print_exc()
    vision_client = None

class FinanceTracker:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        self.accounts = {}
        self.total_balance_usd = 0
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–∞–ª—é—Ç
        self.currency_patterns = {
            'RUB': [r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ', r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*—Ä—É–±'],
            'USD': [r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*\$', r'\$(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'],
            'EUR': [r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*‚Ç¨', r'‚Ç¨(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'],
            'AED': [r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*AED'],
            'IDR': [r'Rp\s*(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)', r'(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)\s*Rp']
        }
        
        # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
        self.conversion_rates = {
            'RUB': 0.011, 'USD': 1.0, 'EUR': 1.09, 'AED': 0.27, 'IDR': 0.000065
        }
    
    def process_image(self, image_content):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision"""
        if not vision_client:
            return {'success': False, 'error': 'Google Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            import re
            image = vision.Image(content=image_content)
            response = vision_client.text_detection(image=image)
            texts = response.text_annotations
            
            if not texts:
                return {'success': False, 'error': '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            full_text = texts[0].description
            text_lines = full_text.split('\n')
            
            # –ò—â–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
            balances = []
            for text in text_lines:
                for currency, patterns in self.currency_patterns.items():
                    for pattern in patterns:
                        matches = re.findall(pattern, text, re.IGNORECASE)
                        if matches:
                            for match in matches:
                                clean_number = match.replace(' ', '').replace(',', '')
                                try:
                                    float(clean_number)
                                    balances.append({
                                        'value': clean_number,
                                        'currency': currency,
                                        'original_text': text
                                    })
                                except ValueError:
                                    continue
            
            if balances:
                # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)
                main_balance = max(balances, key=lambda x: float(x['value']))
                return {
                    'success': True,
                    'main_balance': main_balance,
                    'all_balances': balances,
                    'full_text': full_text
                }
            else:
                return {
                    'success': False,
                    'error': '–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    'full_text': full_text
                }
                
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def add_balance(self, amount, currency, source='manual'):
        """–î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å"""
        timestamp = datetime.now().isoformat()
        
        account_id = f"account_{currency}"
        
        if account_id not in self.accounts:
            account_names = {
                'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—á–µ—Ç', 'USD': '–î–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç', 'EUR': '–ï–≤—Ä–æ —Å—á–µ—Ç',
                'AED': '–î–∏—Ä—Ö–∞–º–æ–≤—ã–π —Å—á–µ—Ç', 'IDR': '–†—É–ø–∏–µ–≤—ã–π —Å—á–µ—Ç'
            }
            
            self.accounts[account_id] = {
                'name': account_names.get(currency, f'–°—á–µ—Ç –≤ {currency}'),
                'currency': currency,
                'balance': 0,
                'balance_usd': 0,
                'last_updated': None,
                'transactions': []
            }
        
        account = self.accounts[account_id]
        old_balance = account['balance']
        account['balance'] = float(amount)
        account['last_updated'] = timestamp
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
        if currency in self.conversion_rates:
            account['balance_usd'] = account['balance'] * self.conversion_rates[currency]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = {
            'id': len(account['transactions']) + 1,
            'timestamp': timestamp,
            'old_balance': old_balance,
            'new_balance': account['balance'],
            'change': account['balance'] - old_balance,
            'source': source
        }
        
        account['transactions'].append(transaction)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
        self.update_total_balance()
        
        return transaction
    
    def update_total_balance(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USD"""
        total_usd = 0
        for account in self.accounts.values():
            total_usd += account['balance_usd']
        self.total_balance_usd = round(total_usd, 2)
    
    def get_summary(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        return {
            'accounts': self.accounts,
            'total_balance_usd': self.total_balance_usd,
            'last_updated': datetime.now().isoformat(),
            'total_count': len(self.accounts)
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
finance_tracker = FinanceTracker()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTML —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Finance Tracker Pro</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <style>
            body { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }
            .main-container { 
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                margin: 20px;
                padding: 30px;
            }
            .balance-card {
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                color: white;
                border-radius: 20px;
                padding: 30px;
                text-align: center;
                margin: 20px 0;
                box-shadow: 0 10px 30px rgba(79, 172, 254, 0.3);
            }
            .balance-amount {
                font-size: 3rem;
                font-weight: bold;
                margin: 10px 0;
            }
            .balance-change {
                font-size: 1.2rem;
                opacity: 0.9;
            }
            .form-section {
                background: #f8f9fa;
                border-radius: 15px;
                padding: 25px;
                margin: 20px 0;
                border: 1px solid #e9ecef;
            }
            .upload-section {
                background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
                border-radius: 15px;
                padding: 25px;
                margin: 20px 0;
                border: none;
            }
            .btn-primary {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border: none;
                border-radius: 25px;
                padding: 12px 30px;
                font-weight: 600;
                transition: all 0.3s;
            }
            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            }
            .btn-success {
                background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
                border: none;
                border-radius: 25px;
                padding: 12px 30px;
                font-weight: 600;
            }
            .account-card {
                background: white;
                border-radius: 15px;
                padding: 20px;
                margin: 15px 0;
                border: 1px solid #e9ecef;
                transition: all 0.3s;
                box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            }
            .account-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.15);
            }
            .account-name {
                font-size: 1.2rem;
                font-weight: 600;
                color: #2c3e50;
                margin-bottom: 10px;
            }
            .account-balance-usd {
                font-size: 1.8rem;
                font-weight: bold;
                color: #27ae60;
                margin-bottom: 5px;
            }
            .account-balance-local {
                font-size: 1rem;
                color: #7f8c8d;
            }
            .chart-container {
                background: white;
                border-radius: 15px;
                padding: 20px;
                margin: 20px 0;
                box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            }
            .success-message {
                background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
                color: white;
                padding: 15px;
                border-radius: 10px;
                margin: 15px 0;
                text-align: center;
                font-weight: 600;
            }
            .error-message {
                background: linear-gradient(135deg, #ff6b6b 0%, #ffa5a5 100%);
                color: white;
                padding: 15px;
                border-radius: 10px;
                margin: 15px 0;
                text-align: center;
                font-weight: 600;
            }
            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .stat-card {
                background: white;
                border-radius: 15px;
                padding: 20px;
                text-align: center;
                box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            }
            .stat-number {
                font-size: 2rem;
                font-weight: bold;
                color: #667eea;
            }
            .stat-label {
                color: #7f8c8d;
                font-size: 0.9rem;
                text-transform: uppercase;
                letter-spacing: 1px;
            }
        </style>
    </head>
    <body>
        <div class="container-fluid">
            <div class="main-container">
                <div class="text-center mb-4">
                    <h1 class="display-4 fw-bold text-gradient">üí∞ Finance Tracker Pro</h1>
                    <p class="lead text-muted">–£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —Å AI</p>
                </div>
                
                <!-- –û–±—â–∏–π –±–∞–ª–∞–Ω—Å -->
                <div class="balance-card">
                    <h3>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</h3>
                    <div class="balance-amount">$<span id="total">0.00</span></div>
                    <div class="balance-change" id="balanceChange"></div>
                </div>
                
                <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="totalAccounts">0</div>
                        <div class="stat-label">–°—á–µ—Ç–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="totalTransactions">0</div>
                        <div class="stat-label">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="lastUpdate">-</div>
                        <div class="stat-label">–û–±–Ω–æ–≤–ª–µ–Ω–æ</div>
                    </div>
                </div>
                
                <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ -->
                <div class="form-section">
                    <h4>üí≥ –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—Ä—É—á–Ω—É—é</h4>
                    <div class="row">
                        <div class="col-md-4">
                            <input type="number" id="amount" class="form-control" placeholder="–°—É–º–º–∞" step="0.01">
                        </div>
                        <div class="col-md-4">
                            <select id="currency" class="form-select">
                                <option value="RUB">–†—É–±–ª–∏ (RUB)</option>
                                <option value="USD">–î–æ–ª–ª–∞—Ä—ã (USD)</option>
                                <option value="EUR">–ï–≤—Ä–æ (EUR)</option>
                                <option value="AED">–î–∏—Ä—Ö–∞–º—ã (AED)</option>
                                <option value="IDR">–†—É–ø–∏–∏ (IDR)</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <button onclick="addBalance()" class="btn btn-primary w-100">–î–æ–±–∞–≤–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
                
                <!-- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ -->
                <div class="upload-section">
                    <h4>üì± –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h4>
                    <div class="row">
                        <div class="col-md-6">
                            <input type="file" id="imageFile" class="form-control" accept="image/*">
                        </div>
                        <div class="col-md-3">
                            <button onclick="processImage()" class="btn btn-primary w-100">–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å</button>
                        </div>
                        <div class="col-md-3">
                            <button onclick="testAPI()" class="btn btn-success w-100">üß™ –¢–µ—Å—Ç API</button>
                        </div>
                    </div>
                    <div id="imageResult"></div>
                </div>
                
                <!-- –ì—Ä–∞—Ñ–∏–∫–∏ -->
                <div class="row">
                    <div class="col-md-6">
                        <div class="chart-container">
                            <h5>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∞–ª—é—Ç–∞–º</h5>
                            <canvas id="currencyChart"></canvas>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="chart-container">
                            <h5>üìà –î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞</h5>
                            <canvas id="totalBalanceChart"></canvas>
                        </div>
                    </div>
                </div>
                
                <!-- –°—á–µ—Ç–∞ -->
                <div class="chart-container">
                    <h4>üè¶ –í–∞—à–∏ —Å—á–µ—Ç–∞</h4>
                    <div id="accountsList">–ù–µ—Ç —Å—á–µ—Ç–æ–≤</div>
                </div>
            </div>
        </div>
        
        <script>
            let accounts = {};
            let currencyChart = null;
            let totalBalanceChart = null;
            
            function addBalance() {
                const amount = document.getElementById('amount').value;
                const currency = document.getElementById('currency').value;
                
                if (!amount) {
                    showMessage('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É', 'error');
                    return;
                }
                
                fetch('/api/add_balance', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({amount: parseFloat(amount), currency: currency})
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateDisplay(data.accounts);
                        document.getElementById('amount').value = '';
                        showMessage('–ë–∞–ª–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
                    } else {
                        showMessage('–û—à–∏–±–∫–∞: ' + data.error, 'error');
                    }
                });
            }
            
            function processImage() {
                console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
                
                const fileInput = document.getElementById('imageFile');
                const file = fileInput.files[0];
                
                if (!file) {
                    showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
                    return;
                }
                
                console.log('üìÅ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω:', file.name, '–†–∞–∑–º–µ—Ä:', file.size, '–±–∞–π—Ç');
                
                const formData = new FormData();
                formData.append('image', file);
                
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ /api/process_image...');
                
                fetch('/api/process_image', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
                    return response.json();
                })
                .then(data => {
                    console.log('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
                    
                    if (data.success) {
                        const balance = data.main_balance;
                        showMessage(`–ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å: ${balance.value} ${balance.currency}`, 'success');
                        
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
                        console.log('üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é –±–∞–ª–∞–Ω—Å...');
                        fetch('/api/add_balance', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({amount: parseFloat(balance.value), currency: balance.currency})
                        })
                        .then(response => response.json())
                        .then(addData => {
                            if (addData.success) {
                                updateDisplay(addData.accounts);
                                showMessage('–ë–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
                            }
                        });
                    } else {
                        showMessage('–û—à–∏–±–∫–∞: ' + data.error, 'error');
                    }
                })
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                    showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
                });
            }
            
            function updateDisplay(accountsData) {
                accounts = accountsData.accounts;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
                document.getElementById('total').textContent = formatNumber(accountsData.total_balance_usd);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                document.getElementById('totalAccounts').textContent = accountsData.total_count;
                document.getElementById('totalTransactions').textContent = getTotalTransactions();
                document.getElementById('lastUpdate').textContent = formatDate(accountsData.last_updated);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
                updateAccountsList();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                updateCharts();
            }
            
            function updateAccountsList() {
                const accountsList = document.getElementById('accountsList');
                if (Object.keys(accounts).length === 0) {
                    accountsList.innerHTML = '<p class="text-muted text-center">–ù–µ—Ç —Å—á–µ—Ç–æ–≤</p>';
                    return;
                }
                
                let html = '';
                for (const [id, account] of Object.entries(accounts)) {
                    html += `
                        <div class="account-card">
                            <div class="account-name">${account.name}</div>
                            <div class="account-balance-usd">$${formatNumber(account.balance_usd)}</div>
                            <div class="account-balance-local">${formatNumber(account.balance)} ${account.currency}</div>
                            <small class="text-muted">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formatDate(account.last_updated)}</small>
                        </div>
                    `;
                }
                accountsList.innerHTML = html;
            }
            
            function updateCharts() {
                updateCurrencyChart();
                updateTotalBalanceChart();
            }
            
            function updateCurrencyChart() {
                const ctx = document.getElementById('currencyChart').getContext('2d');
                
                if (currencyChart) {
                    currencyChart.destroy();
                }
                
                const labels = [];
                const data = [];
                const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'];
                
                for (const [id, account] of Object.entries(accounts)) {
                    labels.push(account.currency);
                    data.push(account.balance_usd);
                }
                
                currencyChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data,
                            backgroundColor: colors.slice(0, labels.length),
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }
            
            function updateTotalBalanceChart() {
                const ctx = document.getElementById('totalBalanceChart').getContext('2d');
                
                if (totalBalanceChart) {
                    totalBalanceChart.destroy();
                }
                
                // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                const labels = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥'];
                const data = [0, 0, 0, 0, 0, 0, 0, parseFloat(document.getElementById('total').textContent)];
                
                totalBalanceChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å (USD)',
                            data: data,
                            borderColor: '#667eea',
                            backgroundColor: 'rgba(102, 126, 234, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            function getTotalTransactions() {
                let total = 0;
                for (const account of Object.values(accounts)) {
                    total += account.transactions ? account.transactions.length : 0;
                }
                return total;
            }
            
            function formatNumber(num) {
                if (num === undefined || num === null) return '0.00';
                return parseFloat(num).toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }
            
            function formatDate(dateString) {
                if (!dateString) return '-';
                const date = new Date(dateString);
                return date.toLocaleDateString('ru-RU');
            }
            
            function showMessage(message, type) {
                const resultDiv = document.getElementById('imageResult');
                const className = type === 'success' ? 'success-message' : 'error-message';
                resultDiv.innerHTML = `<div class="${className}">${message}</div>`;
                setTimeout(() => resultDiv.innerHTML = '', 5000);
            }
            
            function testAPI() {
                console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é API...');
                showMessage('–¢–µ—Å—Ç–∏—Ä—É—é API...', 'success');
                
                // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
                fetch('/health')
                    .then(response => response.json())
                    .then(data => {
                        console.log('‚úÖ Health check:', data);
                        showMessage('Health: OK', 'success');
                    })
                    .catch(error => {
                        console.error('‚ùå Health check failed:', error);
                        showMessage('Health: FAILED', 'error');
                    });
                
                // –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å Google Vision
                fetch('/api/vision_status')
                    .then(response => response.json())
                    .then(data => {
                        console.log('‚úÖ Vision status:', data);
                        showMessage(`Vision: ${data.vision_available ? 'OK' : 'FAILED'}`, data.vision_available ? 'success' : 'error');
                    })
                    .catch(error => {
                        console.error('‚ùå Vision status failed:', error);
                        showMessage('Vision: FAILED', 'error');
                    });
                
                // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
                fetch('/api/accounts')
                    .then(response => response.json())
                    .then(data => {
                        console.log('‚úÖ Accounts:', data);
                        showMessage(`Accounts: ${data.total_count} —Å—á–µ—Ç–æ–≤`, 'success');
                    })
                    .catch(error => {
                        console.error('‚ùå Accounts failed:', error);
                        showMessage('Accounts: FAILED', 'error');
                    });
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            fetch('/api/accounts')
                .then(response => response.json())
                .then(data => updateDisplay(data));
        </script>
    </body>
    </html>
    """
    return html

@app.route('/api/accounts', methods=['GET'])
def get_accounts():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º"""
    return jsonify(finance_tracker.get_summary())

@app.route('/api/add_balance', methods=['POST'])
def add_balance():
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        data = request.get_json()
        amount = data.get('amount', 0)
        currency = data.get('currency', 'USD')
        
        transaction = finance_tracker.add_balance(amount, currency, source='manual')
        accounts_data = finance_tracker.get_summary()
        
        return jsonify({
            'success': True,
            'transaction': transaction,
            'accounts': accounts_data
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/process_image', methods=['POST'])
def process_image():
    """API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        if 'image' not in request.files:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ request.files")
            return jsonify({'success': False, 'error': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'})
        
        image_file = request.files['image']
        if image_file.filename == '':
            print("‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})
        
        print(f"üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {image_file.filename}")
        
        image_content = image_file.read()
        print(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(image_content)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Vision API
        if not vision_client:
            print("‚ùå Google Vision API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return jsonify({'success': False, 'error': 'Google Vision API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'})
        
        print("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Google Vision...")
        result = finance_tracker.process_image(image_content)
        
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ API: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/vision_status')
def vision_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Google Vision API"""
    status = {
        'vision_available': vision_client is not None,
        'credentials_set': bool(os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')),
        'credentials_content': bool(os.environ.get('GOOGLE_CREDENTIALS_CONTENT')),
        'timestamp': datetime.now().isoformat()
    }
    return jsonify(status)

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5001))
    app.run(debug=False, host='0.0.0.0', port=port) 
import os
import json
import re
from datetime import datetime
from typing import List, Dict, Optional

# –î–ª—è Google Vision API –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install google-cloud-vision
try:
    from google.cloud import vision
    GOOGLE_VISION_AVAILABLE = True
except ImportError:
    GOOGLE_VISION_AVAILABLE = False
    print("‚ö†Ô∏è  Google Cloud Vision –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-cloud-vision")

class GoogleVisionBalanceExtractor:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Vision API"""
        if not GOOGLE_VISION_AVAILABLE:
            print("‚ùå Google Cloud Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        try:
            self.client = vision.ImageAnnotatorClient()
            print("‚úÖ Google Cloud Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Vision: {e}")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        self.currency_patterns = {
            'RUB': [
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*—Ä—É–±',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*—Ä—É–±–ª'
            ],
            'USD': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*\$',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*USD',
                r'\$(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'EUR': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*‚Ç¨',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*EUR',
                r'‚Ç¨(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'AED': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*AED',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*–¥–∏—Ä—Ö–∞–º',
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*ÿØ\.ÿ•'
            ],
            'IDR': [
                r'Rp\s*(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)',
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)\s*Rp',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{3})?)\s*—Ä—É–ø–∏–π'
            ]
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        self.balance_keywords = [
            'balance', 'total', 'available', 'current', 'main',
            '–±–∞–ª–∞–Ω—Å', '–¥–æ—Å—Ç—É–ø–Ω–æ', '–æ—Å–Ω–æ–≤–Ω–æ–π', '—Ç–µ–∫—É—â–∏–π', '–æ–±—â–∏–π'
        ]

    def extract_balances_from_text(self, text_list: List[str]) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        balances = []
        
        for text in text_list:
            text_lower = text.lower()
            
            # –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
            for currency, patterns in self.currency_patterns.items():
                for pattern in patterns:
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    if matches:
                        for match in matches:
                            # –û—á–∏—â–∞–µ–º —á–∏—Å–ª–æ
                            clean_number = match.replace(' ', '').replace(',', '')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                            try:
                                float(clean_number)
                                balances.append({
                                    'value': clean_number,
                                    'currency': currency,
                                    'original_text': text,
                                    'pattern': pattern
                                })
                            except ValueError:
                                continue
            
            # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            for keyword in self.balance_keywords:
                if keyword in text_lower:
                    # –ò—â–µ–º —á–∏—Å–ª–∞ —Ä—è–¥–æ–º —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
                    for currency, patterns in self.currency_patterns.items():
                        for pattern in patterns:
                            matches = re.findall(pattern, text, re.IGNORECASE)
                            if matches:
                                for match in matches:
                                    clean_number = match.replace(' ', '').replace(',', '')
                                    try:
                                        float(clean_number)
                                        balances.append({
                                            'value': clean_number,
                                            'currency': currency,
                                            'original_text': text,
                                            'keyword': keyword,
                                            'pattern': pattern
                                        })
                                    except ValueError:
                                        continue
        
        return balances

    def process_image(self, image_path: str) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision"""
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {os.path.basename(image_path)}")
        print("-" * 50)
        
        if not GOOGLE_VISION_AVAILABLE:
            return {'success': False, 'error': 'Google Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(image_path, 'rb') as image_file:
                content = image_file.read()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = vision.Image(content=content)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            response = self.client.text_detection(image=image)
            texts = response.text_annotations
            
            if not texts:
                print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {'success': False, 'error': '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            full_text = texts[0].description
            text_lines = full_text.split('\n')
            
            print("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
            for line in text_lines[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
                if line.strip():
                    print(f"   '{line}'")
            
            if len(text_lines) > 20:
                print(f"   ... –∏ –µ—â–µ {len(text_lines) - 20} —Å—Ç—Ä–æ–∫")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.extract_balances_from_text(text_lines)
            
            if balances:
                print(f"\nüí∞ –ù–∞–π–¥–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: {len(balances)}")
                for i, balance in enumerate(balances, 1):
                    print(f"   {i}. {balance['value']} {balance['currency']}")
                    print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: '{balance['original_text']}'")
                    if 'keyword' in balance:
                        print(f"      –ù–∞–π–¥–µ–Ω –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {balance['keyword']}")
                
                # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é)
                main_balance = max(balances, key=lambda x: float(x['value']))
                
                return {
                    'success': True,
                    'main_balance': main_balance,
                    'all_balances': balances,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
            else:
                print("‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    'success': False,
                    'balance': None,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return {
                'success': False,
                'balance': None,
                'error': str(e)
            }

    def test_all_screenshots(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã"""
        screenshots_dir = "test_screenshots"
        
        if not os.path.exists(screenshots_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {screenshots_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = ['.png', '.jpg', '.jpeg', '.bmp', '.tiff']
        image_files = []
        
        for file in os.listdir(screenshots_dir):
            if any(file.lower().endswith(ext) for ext in image_extensions):
                image_files.append(os.path.join(screenshots_dir, file))
        
        if not image_files:
            print(f"‚ùå –í –ø–∞–ø–∫–µ {screenshots_dir} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
            return
        
        print(f"üì± –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        print("=" * 60)
        
        results = []
        
        for image_path in image_files:
            result = self.process_image(image_path)
            result['filename'] = os.path.basename(image_path)
            results.append(result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results(results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_summary(results)
        
        return results

    def save_results(self, results: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"google_vision_results_{timestamp}.json"
        
        save_data = {
            'timestamp': datetime.now().isoformat(),
            'total_images': len(results),
            'successful_extractions': sum(1 for r in results if r['success']),
            'results': results
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(save_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")

    def show_summary(self, results: List[Dict]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (Google Vision):")
        print("=" * 60)
        
        total = len(results)
        successful = sum(1 for r in results if r['success'])
        failed = total - successful
        
        print(f"üì± –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {failed}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/total)*100:.1f}%")
        
        if successful > 0:
            print(f"\nüí∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
            for result in results:
                if result['success']:
                    balance = result['main_balance']
                    print(f"   {result['filename']}: {balance['value']} {balance['currency']}")

def main():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE CLOUD VISION API")
    print("=" * 60)
    
    if not GOOGLE_VISION_AVAILABLE:
        print("\n‚ùå Google Cloud Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("\nüìã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Google Vision API –Ω—É–∂–Ω–æ:")
        print("1. –°–æ–∑–¥–∞—Ç—å Google Cloud –∞–∫–∫–∞—É–Ω—Ç")
        print("2. –í–∫–ª—é—á–∏—Ç—å Vision API")
        print("3. –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install google-cloud-vision")
        print("5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_APPLICATION_CREDENTIALS")
        return
    
    extractor = GoogleVisionBalanceExtractor()
    results = extractor.test_all_screenshots()
    
    if results:
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if any(r['success'] for r in results):
            print("‚úÖ Google Vision API –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∑–∞–¥–∞—á–µ–π!")
            print("   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –≤–∞–ª—é—Ç—ã –∏ —è–∑—ã–∫–∏.")
        else:
            print("‚ùå Google Vision –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –±–∞–ª–∞–Ω—Å—ã.")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

if __name__ == "__main__":
    main() 
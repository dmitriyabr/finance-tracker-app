#!/usr/bin/env python3
"""
Telegram –±–æ—Ç Finance Tracker —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
"""

import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É
from core import finance_tracker_core

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI (headless mode)
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io
from matplotlib import rcParams

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
rcParams['font.family'] = ['DejaVu Sans', 'Arial', 'sans-serif']
rcParams['font.size'] = 10
rcParams['figure.figsize'] = (10, 8)
rcParams['savefig.dpi'] = 150
rcParams['savefig.bbox'] = 'tight'
rcParams['savefig.pad_inches'] = 0.1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
rcParams['font.family'] = 'DejaVu Sans'
rcParams['font.size'] = 10

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FinanceTrackerBotWithGraphs:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ core.py
        self.vision_client = finance_tracker_core.vision_client
        self.currency_patterns = finance_tracker_core.currency_patterns
        self.balance_keywords = finance_tracker_core.balance_keywords

    def process_image(self, image_content):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision"""
        return finance_tracker_core.process_image(image_content)

    def extract_balance_from_text(self, text_lines):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        return finance_tracker_core.extract_balance_from_text(text_lines)

    def fix_russian_number_format(self, text, currency):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∏—Å–µ–ª"""
        return finance_tracker_core.fix_russian_number_format(text, currency)

    def get_accounts_summary(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        return finance_tracker_core.get_accounts_summary()

    def get_accounts_details(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        return finance_tracker_core.get_accounts_details()

    def update_account_balance_from_image(self, balance_data, image_text, source='telegram'):
        """–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –≤ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return finance_tracker_core.update_account_balance_from_image(balance_data, image_text, source)

    def create_balance_chart(self):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º"""
        try:
            from models import create_session, Account
            
            session = create_session()
            accounts = session.query(Account).all()
            
            if not accounts:
                session.close()
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            fig, ax = plt.subplots(figsize=(10, 8))
            
            labels = []
            sizes = []
            colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
            
            for i, account in enumerate(accounts):
                labels.append(account.name)
                sizes.append(account.balance_usd)
            
            if not sizes or sum(sizes) == 0:
                plt.close(fig)
                session.close()
                return None
            
            wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', 
                                             colors=colors[:len(sizes)], startangle=90)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
            
            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º', fontsize=16, fontweight='bold', pad=20)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            total_usd = sum(account.balance_usd for account in accounts)
            
            ax.text(0, -1.2, f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_usd:,.2f}', 
                   ha='center', fontsize=14, fontweight='bold',
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            session.close()
            
            return img_buffer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                plt.close('all')
            except:
                pass
            if 'session' in locals():
                session.close()
            return None

    def create_account_history_chart(self, account_id):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å—á–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from models import create_session, Account, Transaction
            
            session = create_session()
            account = session.query(Account).filter_by(id=account_id).first()
            
            if not account:
                session.close()
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
            transactions = session.query(Transaction).filter_by(account_id=account_id).order_by(Transaction.timestamp).all()
            
            if not transactions:
                session.close()
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_transactions = sorted(transactions, key=lambda x: x.timestamp)
            
            dates = [t.timestamp for t in sorted_transactions]
            balances = [t.new_balance for t in sorted_transactions]
            
            # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫ –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
            ax.plot(dates, balances, 'o-', linewidth=2, markersize=6, color='#36A2EB')
            ax.fill_between(dates, balances, alpha=0.3, color='#36A2EB')
            ax.set_title(f'–î–∏–Ω–∞–º–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {account.name}', fontsize=16, fontweight='bold')
            ax.set_ylabel(f'–ë–∞–ª–∞–Ω—Å ({account.currency})', fontsize=12)
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            session.close()
            return img_buffer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                plt.close('all')
            except:
                pass
            if 'session' in locals():
                session.close()
            return None

    def create_total_balance_history_chart(self):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –≤ USD"""
        return finance_tracker_core.create_total_balance_history_chart()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
finance_tracker = FinanceTrackerBotWithGraphs()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    accounts_data = finance_tracker.get_accounts_summary()
    accounts_details = finance_tracker.get_accounts_details()
    
    # –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_url = os.environ.get('WEB_APP_URL', 'https://finance-tracker-app-production.up.railway.app')
    
    welcome_text = "üí∞ **Finance Tracker Bot —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏**\n\n"
    
    if accounts_data['accounts_count'] > 0:
        welcome_text += f"üíµ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accounts_data['total_balance_usd']:,.2f}**\n\n"
        welcome_text += "üè¶ **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n"
        
        for account_id, account in accounts_details.items():
            welcome_text += f"‚Ä¢ {account['name']}: {account['balance']:,.2f} {account['currency']} (‚âà ${account['balance_usd']:,.2f})\n"
        
        welcome_text += "\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!"
    else:
        welcome_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!"
    
    welcome_text += "\n\nüìä **–ö–æ–º–∞–Ω–¥—ã:**\n"
    welcome_text += "/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
    welcome_text += "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—á–µ—Ç–æ–≤\n"
    welcome_text += "/help - —Å–ø—Ä–∞–≤–∫–∞"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    welcome_text += f"\n\nüåê **–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**\n"
    welcome_text += f"–î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏: {web_app_url}"
    
    keyboard = [
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç–æ–≤", callback_data="show_history")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", callback_data="show_balance_chart")],
        [InlineKeyboardButton("üìä –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", callback_data="show_total_history")],
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=web_app_url)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üì± **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏

üîç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:**
‚Ä¢ ‚ÇΩ RUB (—Ä—É–±–ª–∏), $ USD (–¥–æ–ª–ª–∞—Ä—ã), ‚Ç¨ EUR (–µ–≤—Ä–æ)
‚Ä¢ AED (–¥–∏—Ä—Ö–∞–º—ã), Rp IDR (—Ä—É–ø–∏–∏)

üí∞ **–°–∏—Å—Ç–µ–º–∞ —Å—á–µ—Ç–æ–≤:**
‚Ä¢ –ö–∞–∂–¥–∞—è –≤–∞–ª—é—Ç–∞ = –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –∞ –Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ –í—Å–µ –≤–∞–ª—é—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä—ã

üìä **–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—á–µ—Ç–æ–≤
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìà **–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
‚Ä¢ –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –≤ USD
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫"""
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞...")
    
    chart_buffer = finance_tracker.create_balance_chart()
    
    if chart_buffer:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=chart_buffer,
            caption="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    accounts_data = finance_tracker.get_accounts_summary()
    
    if accounts_data['accounts_count'] == 0:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å—á–µ—Ç–∞–º
    accounts_details = finance_tracker.get_accounts_details()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    keyboard = []
    for account_id, account in accounts_details.items():
        keyboard.append([InlineKeyboardButton(
            f"üìä {account['name']} ({account['currency']})", 
            callback_data=f"history_{account_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìä **–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        photo = update.message.photo[-1]
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        file = await context.bot.get_file(photo.file_id)
        image_content = await file.download_as_bytearray()
        image_bytes = bytes(image_content)
        
        result = finance_tracker.process_image(image_bytes)
        
        if result['success']:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            transaction_result = finance_tracker.update_account_balance_from_image(
                result['main_balance'], 
                result['full_text'],
                source='telegram'
            )
            
            if transaction_result['success']:
                main_balance = result['main_balance']
                account = transaction_result['account']
                
                success_text = f"‚úÖ **–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                success_text += f"üè¶ **–°—á–µ—Ç:** {account['name']}\n"
                success_text += f"üí∞ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {main_balance['value']} ({main_balance['currency']})\n"
                success_text += f"üíµ **–í –¥–æ–ª–ª–∞—Ä–∞—Ö:** ${account['balance_usd']:,.2f}\n"
                
                if transaction_result['change'] != 0:
                    change_emoji = "üìà" if transaction_result['change'] > 0 else "üìâ"
                    change_text = f"+{transaction_result['change']:,.2f}" if transaction_result['change'] > 0 else f"{transaction_result['change']:,.2f}"
                    success_text += f"{change_emoji} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {change_text} {main_balance['currency']}\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
                accounts_summary = finance_tracker.get_accounts_summary()
                success_text += f"\nüí∞ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:** ${accounts_summary['total_balance_usd']:,.2f}"
                
                keyboard = [
                    [InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="show_balance_chart")],
                    [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await processing_msg.edit_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {transaction_result['error']}", parse_mode='Markdown')
        else:
            error_text = f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å**\n\n"
            error_text += f"üîç **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n"
            
            if result.get('text_lines'):
                for i, line in enumerate(result['text_lines'][:5]):
                    if line.strip():
                        error_text += f"{i+1}. {line}\n"
            
            error_text += "\nüí° **–°–æ–≤–µ—Ç—ã:**\n"
            error_text += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω\n"
            error_text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å\n"
            error_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            await processing_msg.edit_text(error_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "show_balance_chart":
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞...")
        
        chart_buffer = finance_tracker.create_balance_chart()
        
        if chart_buffer:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=chart_buffer,
                caption="üí∞ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
    
    elif query.data == "show_history":
        accounts_data = finance_tracker.get_accounts_summary()
        
        if accounts_data['accounts_count'] == 0:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å—á–µ—Ç–∞–º
        accounts_details = finance_tracker.get_accounts_details()
        
        keyboard = []
        for account_id, account in accounts_details.items():
            keyboard.append([InlineKeyboardButton(
                f"üìä {account['name']} ({account['currency']})", 
                callback_data=f"history_{account_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == "show_total_history":
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏...")
        
        chart_buffer = finance_tracker.create_total_balance_history_chart()
        
        if chart_buffer:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=chart_buffer,
                caption="üìä **–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤—Å–µ —Å—á–µ—Ç–∞)**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏.")
    
    elif query.data.startswith("history_"):
        account_id = query.data.replace("history_", "")
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏...")
        
        chart_buffer = finance_tracker.create_account_history_chart(account_id)
        
        if chart_buffer:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
            accounts_details = finance_tracker.get_accounts_details()
            account = accounts_details.get(int(account_id))
            
            if account:
                caption = f"üìä **–ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç–∞: {account['name']}**\n\n"
                caption += f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {account['balance']:,.2f} {account['currency']}\n"
                caption += f"üíµ –í –¥–æ–ª–ª–∞—Ä–∞—Ö: ${account['balance_usd']:,.2f}"
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await context.bot.send_photo(
                    chat_id=query.from_user.id,
                    photo=chart_buffer,
                    caption=caption,
                    reply_markup=reply_markup
                )
                await query.message.delete()
            else:
                await query.edit_message_text("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞.")
    
    elif query.data == "back_to_main":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        accounts_data = finance_tracker.get_accounts_summary()
        accounts_details = finance_tracker.get_accounts_details()
        
        # –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        web_app_url = os.environ.get('WEB_APP_URL', 'https://finance-tracker-app-production.up.railway.app')
        
        welcome_text = "üí∞ **Finance Tracker Bot —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏**\n\n"
        
        if accounts_data['accounts_count'] > 0:
            welcome_text += f"üíµ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accounts_data['total_balance_usd']:,.2f}**\n\n"
            welcome_text += "üè¶ **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n"
            
            for account_id, account in accounts_details.items():
                welcome_text += f"‚Ä¢ {account['name']}: {account['balance']:,.2f} {account['currency']} (‚âà ${account['balance_usd']:,.2f})\n"
            
            welcome_text += "\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!"
        else:
            welcome_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!"
        
        welcome_text += "\n\nüìä **–ö–æ–º–∞–Ω–¥—ã:**\n"
        welcome_text += "/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
        welcome_text += "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—á–µ—Ç–æ–≤\n"
        welcome_text += "/help - —Å–ø—Ä–∞–≤–∫–∞"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        welcome_text += f"\n\nüåê **–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**\n"
        welcome_text += f"–î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏: {web_app_url}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç–æ–≤", callback_data="show_history")],
                [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", callback_data="show_balance_chart")],
                [InlineKeyboardButton("üìä –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", callback_data="show_total_history")],
                [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=web_app_url)]
            ]),
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except:
            pass
    
    elif query.data == "help":
        await help_command(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")
    
    try:
        if update and hasattr(update, 'effective_message') and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        elif update and hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ error_handler: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("–ü—Ä–∏–º–µ—Ä: export TELEGRAM_BOT_TOKEN='your_bot_token_here'")
        return
    
    application = Application.builder().token(bot_token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ Finance Tracker —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏...")
    application.run_polling()

if __name__ == '__main__':
    main() 
#!/usr/bin/env python3
"""
Telegram –±–æ—Ç Finance Tracker —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
"""

import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from google.cloud import vision
import json
from datetime import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI (headless mode)
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io
import base64
from matplotlib import rcParams

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
rcParams['font.family'] = ['DejaVu Sans', 'Arial', 'sans-serif']
rcParams['font.size'] = 10
rcParams['figure.figsize'] = (10, 8)
rcParams['savefig.dpi'] = 150
rcParams['savefig.bbox'] = 'tight'
rcParams['savefig.pad_inches'] = 0.1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
rcParams['font.family'] = 'DejaVu Sans'
rcParams['font.size'] = 10

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FinanceTrackerBotWithGraphs:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.data_file = 'finance_data.json'
        self.load_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Vision API
        try:
            if not os.environ.get('GOOGLE_APPLICATION_CREDENTIALS'):
                os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = os.path.join(
                    os.path.dirname(os.path.abspath(__file__)), 
                    'google-credentials.json'
                )
            
            self.vision_client = vision.ImageAnnotatorClient()
            logger.info("‚úÖ Google Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Vision: {e}")
            self.vision_client = None
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        self.currency_patterns = {
            'RUB': [
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*–†',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*—Ä—É–±',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*—Ä—É–±–ª'
            ],
            'USD': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*\$',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*USD',
                r'\$(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'EUR': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*‚Ç¨',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*EUR',
                r'‚Ç¨(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'AED': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*AED',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*–¥–∏—Ä—Ö–∞–º',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*ÿØ\.ÿ•'
            ],
            'IDR': [
                r'Rp\s*(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)',
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)\s*Rp',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{3})?)\s*—Ä—É–ø–∏–π'
            ]
        }
        
        self.balance_keywords = [
            'balance', 'total', 'available', 'current', 'main', 'cash',
            '–±–∞–ª–∞–Ω—Å', '–¥–æ—Å—Ç—É–ø–Ω–æ', '–æ—Å–Ω–æ–≤–Ω–æ–π', '—Ç–µ–∫—É—â–∏–π', '–æ–±—â–∏–π', '–Ω–∞–ª–∏—á–Ω—ã–µ'
        ]

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.data = {'accounts': {}, 'total_balance_usd': 0, 'last_updated': None}
        else:
            self.data = {'accounts': {}, 'total_balance_usd': 0, 'last_updated': None}
            logger.info("üìÅ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def fix_russian_number_format(self, text, currency):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∏—Å–µ–ª"""
        if currency == 'RUB':
            russian_pattern = r'(\d{1,3}(?:\s\d{3})*),(\d{2})'
            match = re.search(russian_pattern, text)
            if match:
                whole_part = match.group(1).replace(' ', '').replace(',', '')
                decimal_part = match.group(2)
                correct_number = f"{whole_part}.{decimal_part}"
                try:
                    float(correct_number)
                    return correct_number
                except ValueError:
                    pass
        return None

    def process_image(self, image_content):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision"""
        if not self.vision_client:
            return {'success': False, 'error': 'Google Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            image = vision.Image(content=image_content)
            response = self.vision_client.text_detection(image=image)
            texts = response.text_annotations
            
            if not texts:
                return {'success': False, 'error': '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            full_text = texts[0].description
            text_lines = full_text.split('\n')
            
            balances = self.extract_balance_from_text(text_lines)
            
            if balances:
                for balance in balances:
                    if balance['currency'] == 'RUB':
                        corrected_number = self.fix_russian_number_format(
                            balance['original_text'], 
                            balance['currency']
                        )
                        if corrected_number:
                            balance['value'] = corrected_number
                            balance['corrected'] = True
            
            if balances:
                main_balance = max(balances, key=lambda x: float(x['value']))
                return {
                    'success': True,
                    'main_balance': main_balance,
                    'all_balances': balances,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
            else:
                return {
                    'success': False,
                    'balance': None,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'balance': None,
                'error': str(e)
            }

    def extract_balance_from_text(self, text_lines):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        balances = []
        
        for text in text_lines:
            text_lower = text.lower()
            
            for currency, patterns in self.currency_patterns.items():
                for pattern in patterns:
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    if matches:
                        for match in matches:
                            clean_number = match.replace(' ', '').replace(',', '')
                            try:
                                float(clean_number)
                                balances.append({
                                    'value': clean_number,
                                    'currency': currency,
                                    'original_text': text,
                                    'pattern': pattern
                                })
                            except ValueError:
                                continue
            
            for keyword in self.balance_keywords:
                if keyword in text_lower:
                    for currency, patterns in self.currency_patterns.items():
                        for pattern in patterns:
                            matches = re.findall(pattern, text, re.IGNORECASE)
                            if matches:
                                for match in matches:
                                    clean_number = match.replace(' ', '').replace(',', '')
                                    try:
                                        float(clean_number)
                                        balances.append({
                                            'value': clean_number,
                                            'currency': currency,
                                            'original_text': text,
                                            'keyword': keyword,
                                            'pattern': pattern
                                        })
                                    except ValueError:
                                        continue
        
        return balances

    def identify_account(self, balance_data, image_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç—Ç–æ —Å—á–µ—Ç"""
        currency = balance_data['currency']
        
        for account_id, account in self.data['accounts'].items():
            if account['currency'] == currency:
                return account_id
        
        account_id = f"account_{len(self.data['accounts']) + 1}"
        
        account_names = {
            'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—á–µ—Ç',
            'USD': '–î–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç',
            'EUR': '–ï–≤—Ä–æ —Å—á–µ—Ç',
            'AED': '–î–∏—Ä—Ö–∞–º–æ–≤—ã–π —Å—á–µ—Ç',
            'IDR': '–†—É–ø–∏–µ–≤—ã–π —Å—á–µ—Ç'
        }
        
        account_name = account_names.get(currency, f'–°—á–µ—Ç –≤ {currency}')
        
        self.data['accounts'][account_id] = {
            'name': account_name,
            'currency': currency,
            'balance': 0,
            'balance_usd': 0,
            'last_updated': None,
            'transactions': []
        }
        
        return account_id

    def update_account_balance(self, account_id, balance_data, source='telegram'):
        """–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞"""
        timestamp = datetime.now().isoformat()
        
        account = self.data['accounts'][account_id]
        old_balance = account['balance']
        account['balance'] = float(balance_data['value'])
        account['last_updated'] = timestamp
        
        account['balance_usd'] = self.convert_to_usd(account['balance'], account['currency'])
        
        transaction = {
            'id': len(account['transactions']) + 1,
            'timestamp': timestamp,
            'old_balance': old_balance,
            'new_balance': account['balance'],
            'change': account['balance'] - old_balance,
            'source': source,
            'original_text': balance_data.get('original_text', '')
        }
        
        account['transactions'].append(transaction)
        
        self.update_total_balance_usd()
        self.save_data()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ {account_id}: {account['balance']} {account['currency']} (${account['balance_usd']:.2f})")
        return transaction

    def convert_to_usd(self, amount, currency):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É –≤ –¥–æ–ª–ª–∞—Ä—ã"""
        conversion_rates = {
            'RUB': 0.011, 'USD': 1.0, 'EUR': 1.09, 'AED': 0.27, 'IDR': 0.000065
        }
        
        if currency in conversion_rates:
            return amount * conversion_rates[currency]
        else:
            return amount

    def update_total_balance_usd(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö"""
        if 'total_balance_usd' in self.data:
            self.data['previous_total_balance_usd'] = self.data['total_balance_usd']
        
        total_usd = 0
        for account in self.data['accounts'].values():
            total_usd += account['balance_usd']
        
        self.data['total_balance_usd'] = round(total_usd, 2)
        self.data['last_updated'] = datetime.now().isoformat()

    def get_accounts_summary(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        total_change = 0
        if self.data.get('previous_total_balance_usd'):
            total_change = self.data['total_balance_usd'] - self.data['previous_total_balance_usd']
        
        return {
            'accounts': self.data['accounts'],
            'total_balance_usd': self.data['total_balance_usd'],
            'total_balance_change': round(total_change, 2),
            'last_updated': self.data['last_updated'],
            'total_count': len(self.data['accounts'])
        }

    def create_balance_chart(self):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º"""
        try:
            accounts_data = self.get_accounts_summary()
            
            if not accounts_data['accounts']:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            fig, ax = plt.subplots(figsize=(10, 8))
            
            labels = []
            sizes = []
            colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
            
            for i, (account_id, account) in enumerate(accounts_data['accounts'].items()):
                labels.append(account['name'])
                sizes.append(account['balance_usd'])
            
            if not sizes or sum(sizes) == 0:
                plt.close(fig)
                return None
            
            wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', 
                                             colors=colors[:len(sizes)], startangle=90)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
            
            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º', fontsize=16, fontweight='bold', pad=20)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            total_usd = accounts_data['total_balance_usd']
            change = accounts_data['total_balance_change']
            change_text = f"‚ÜóÔ∏è +${change:,.2f}" if change > 0 else f"‚ÜòÔ∏è {change:,.2f}" if change < 0 else "‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            
            ax.text(0, -1.2, f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_usd:,.2f}\n{change_text}', 
                   ha='center', fontsize=14, fontweight='bold',
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            return img_buffer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                plt.close('all')
            except:
                pass
            return None

    def create_account_history_chart(self, account_id):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å—á–µ—Ç–∞"""
        try:
            if account_id not in self.data['accounts']:
                return None
            
            account = self.data['accounts'][account_id]
            transactions = account.get('transactions', [])
            
            if not transactions:
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_transactions = sorted(transactions, key=lambda x: x['timestamp'])
            
            dates = [datetime.fromisoformat(t['timestamp']) for t in sorted_transactions]
            balances = [t['new_balance'] for t in sorted_transactions]
            changes = [t['change'] for t in sorted_transactions]
            
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
            
            # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
            ax1.plot(dates, balances, 'o-', linewidth=2, markersize=6, color='#36A2EB')
            ax1.fill_between(dates, balances, alpha=0.3, color='#36A2EB')
            ax1.set_title(f'–î–∏–Ω–∞–º–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {account["name"]}', fontsize=14, fontweight='bold')
            ax1.set_ylabel(f'–ë–∞–ª–∞–Ω—Å ({account["currency"]})', fontsize=12)
            ax1.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax1.xaxis.set_major_locator(mdates.DayLocator(interval=1))
            plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            colors = ['green' if c > 0 else 'red' if c < 0 else 'gray' for c in changes]
            ax2.bar(dates, changes, color=colors, alpha=0.7)
            ax2.set_title('–ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', fontsize=14, fontweight='bold')
            ax2.set_ylabel(f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ ({account["currency"]})', fontsize=12)
            ax2.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax2.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax2.xaxis.set_major_locator(mdates.DayLocator(interval=1))
            plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            return img_buffer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                plt.close('all')
            except:
                pass
            return None

    def create_total_balance_history_chart(self):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –≤ USD"""
        try:
            accounts_data = self.get_accounts_summary()
            
            if not accounts_data['accounts']:
                return None
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º
            all_transactions = []
            for account_id, account in accounts_data['accounts'].items():
                for transaction in account.get('transactions', []):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
                    transaction_usd = {
                        'timestamp': transaction['timestamp'],
                        'balance_usd': transaction['new_balance'] * self.convert_to_usd(1, account['currency']),
                        'account_name': account['name'],
                        'currency': account['currency']
                    }
                    all_transactions.append(transaction_usd)
            
            if not all_transactions:
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_transactions = sorted(all_transactions, key=lambda x: x['timestamp'])
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Å—É–º–º–∏—Ä—É–µ–º
            from collections import defaultdict
            daily_totals = defaultdict(float)
            
            for transaction in sorted_transactions:
                date = transaction['timestamp'][:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                daily_totals[date] += transaction['balance_usd']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            dates = sorted(daily_totals.keys())
            totals = [daily_totals[date] for date in dates]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ datetime –æ–±—ä–µ–∫—Ç—ã
            from datetime import datetime
            date_objects = [datetime.strptime(date, '%Y-%m-%d') for date in dates]
            
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
            ax.plot(date_objects, totals, 'o-', linewidth=2, markersize=6, color='#36A2EB')
            ax.fill_between(date_objects, totals, alpha=0.3, color='#36A2EB')
            
            ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤—Å–µ —Å—á–µ—Ç–∞)', fontsize=16, fontweight='bold')
            ax.set_ylabel('–û–±—â–∏–π –±–∞–ª–∞–Ω—Å (USD)', fontsize=12)
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            current_total = accounts_data['total_balance_usd']
            change = accounts_data['total_balance_change']
            change_text = f"‚ÜóÔ∏è +${change:,.2f}" if change > 0 else f"‚ÜòÔ∏è {change:,.2f}" if change < 0 else "‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            
            ax.text(0.02, 0.98, f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_total:,.2f}\n{change_text}', 
                   transform=ax.transAxes, fontsize=12, fontweight='bold',
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7),
                   verticalalignment='top')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            return img_buffer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏: {e}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                plt.close('all')
            except:
                pass
            return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
finance_tracker = FinanceTrackerBotWithGraphs()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    accounts_data = finance_tracker.get_accounts_summary()
    
    welcome_text = "üí∞ **Finance Tracker Bot —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏**\n\n"
    
    if accounts_data['total_count'] > 0:
        welcome_text += f"üíµ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accounts_data['total_balance_usd']:,.2f}**\n\n"
        welcome_text += "üè¶ **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n"
        
        for account_id, account in accounts_data['accounts'].items():
            welcome_text += f"‚Ä¢ {account['name']}: {account['balance']:,.2f} {account['currency']} (‚âà ${account['balance_usd']:,.2f})\n"
        
        welcome_text += "\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!"
    else:
        welcome_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!"
    
    welcome_text += "\n\nüìä **–ö–æ–º–∞–Ω–¥—ã:**\n"
    welcome_text += "/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
    welcome_text += "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—á–µ—Ç–æ–≤\n"
    welcome_text += "/help - —Å–ø—Ä–∞–≤–∫–∞"
    
    keyboard = [
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç–æ–≤", callback_data="show_history")],
        [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", callback_data="show_balance_chart")],
        [InlineKeyboardButton("üìä –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", callback_data="show_total_history")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üì± **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏

üîç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:**
‚Ä¢ ‚ÇΩ RUB (—Ä—É–±–ª–∏), $ USD (–¥–æ–ª–ª–∞—Ä—ã), ‚Ç¨ EUR (–µ–≤—Ä–æ)
‚Ä¢ AED (–¥–∏—Ä—Ö–∞–º—ã), Rp IDR (—Ä—É–ø–∏–∏)

üí∞ **–°–∏—Å—Ç–µ–º–∞ —Å—á–µ—Ç–æ–≤:**
‚Ä¢ –ö–∞–∂–¥–∞—è –≤–∞–ª—é—Ç–∞ = –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –∞ –Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ –í—Å–µ –≤–∞–ª—é—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä—ã

üìä **–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—á–µ—Ç–æ–≤
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìà **–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
‚Ä¢ –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –≤ USD
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫"""
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞...")
    
    chart_buffer = finance_tracker.create_balance_chart()
    
    if chart_buffer:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=chart_buffer,
            caption="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    accounts_data = finance_tracker.get_accounts_summary()
    
    if accounts_data['total_count'] == 0:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    keyboard = []
    for account_id, account in accounts_data['accounts'].items():
        keyboard.append([InlineKeyboardButton(
            f"üìä {account['name']} ({account['currency']})", 
            callback_data=f"history_{account_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìä **–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        photo = update.message.photo[-1]
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        file = await context.bot.get_file(photo.file_id)
        image_content = await file.download_as_bytearray()
        image_bytes = bytes(image_content)
        
        result = finance_tracker.process_image(image_bytes)
        
        if result['success']:
            account_id = finance_tracker.identify_account(
                result['main_balance'], 
                result['full_text']
            )
            
            transaction = finance_tracker.update_account_balance(
                account_id,
                result['main_balance'], 
                source='telegram'
            )
            
            main_balance = result['main_balance']
            account = finance_tracker.data['accounts'][account_id]
            
            success_text = f"‚úÖ **–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            success_text += f"üè¶ **–°—á–µ—Ç:** {account['name']}\n"
            success_text += f"üí∞ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {main_balance['value']} ({main_balance['currency']})\n"
            success_text += f"üíµ **–í –¥–æ–ª–ª–∞—Ä–∞—Ö:** ${account['balance_usd']:,.2f}\n"
            
            if transaction['change'] != 0:
                change_emoji = "üìà" if transaction['change'] > 0 else "üìâ"
                change_text = f"+{transaction['change']:,.2f}" if transaction['change'] > 0 else f"{transaction['change']:,.2f}"
                success_text += f"{change_emoji} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {change_text} {main_balance['currency']}\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            accounts_data = finance_tracker.get_accounts_summary()
            success_text += f"\nüí∞ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:** ${accounts_data['total_balance_usd']:,.2f}"
            
            if accounts_data['total_balance_change'] != 0:
                change = accounts_data['total_balance_change']
                change_emoji = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è"
                success_text += f"\n{change_emoji} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:** ${change:,.2f}"
            
            keyboard = [
                [InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="show_balance_chart")],
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await processing_msg.edit_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        else:
            error_text = f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å**\n\n"
            error_text += f"üîç **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n"
            
            if result.get('text_lines'):
                for i, line in enumerate(result['text_lines'][:5]):
                    if line.strip():
                        error_text += f"{i+1}. {line}\n"
            
            error_text += "\nüí° **–°–æ–≤–µ—Ç—ã:**\n"
            error_text += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω\n"
            error_text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å\n"
            error_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            await processing_msg.edit_text(error_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "show_balance_chart":
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞...")
        
        chart_buffer = finance_tracker.create_balance_chart()
        
        if chart_buffer:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=chart_buffer,
                caption="üí∞ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
    
    elif query.data == "show_history":
        accounts_data = finance_tracker.get_accounts_summary()
        
        if accounts_data['total_count'] == 0:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
            return
        
        keyboard = []
        for account_id, account in accounts_data['accounts'].items():
            keyboard.append([InlineKeyboardButton(
                f"üìä {account['name']} ({account['currency']})", 
                callback_data=f"history_{account_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == "show_total_history":
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏...")
        
        chart_buffer = finance_tracker.create_total_balance_history_chart()
        
        if chart_buffer:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=chart_buffer,
                caption="üìä **–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤—Å–µ —Å—á–µ—Ç–∞)**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏.")
    
    elif query.data.startswith("history_"):
        account_id = query.data.replace("history_", "")
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏...")
        
        chart_buffer = finance_tracker.create_account_history_chart(account_id)
        
        if chart_buffer:
            account = finance_tracker.data['accounts'][account_id]
            caption = f"üìä **–ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç–∞: {account['name']}**\n\n"
            caption += f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {account['balance']:,.2f} {account['currency']}\n"
            caption += f"üíµ –í –¥–æ–ª–ª–∞—Ä–∞—Ö: ${account['balance_usd']:,.2f}"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=chart_buffer,
                caption=caption,
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞.")
    
    elif query.data == "back_to_main":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        accounts_data = finance_tracker.get_accounts_summary()
        
        welcome_text = "üí∞ **Finance Tracker Bot —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏**\n\n"
        
        if accounts_data['total_count'] > 0:
            welcome_text += f"üíµ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accounts_data['total_balance_usd']:,.2f}**\n\n"
            welcome_text += "üè¶ **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n"
            
            for account_id, account in accounts_data['accounts'].items():
                welcome_text += f"‚Ä¢ {account['name']}: {account['balance']:,.2f} {account['currency']} (‚âà ${account['balance_usd']:,.2f})\n"
            
            welcome_text += "\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!"
        else:
            welcome_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!"
        
        welcome_text += "\n\nüìä **–ö–æ–º–∞–Ω–¥—ã:**\n"
        welcome_text += "/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
        welcome_text += "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—á–µ—Ç–æ–≤\n"
        welcome_text += "/help - —Å–ø—Ä–∞–≤–∫–∞"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Å—á–µ—Ç–æ–≤", callback_data="show_history")],
                [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", callback_data="show_balance_chart")],
                [InlineKeyboardButton("üìä –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", callback_data="show_total_history")]
            ]),
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except:
            pass
    
    elif query.data == "help":
        await help_command(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")
    
    try:
        if update and hasattr(update, 'effective_message') and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        elif update and hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ error_handler: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("–ü—Ä–∏–º–µ—Ä: export TELEGRAM_BOT_TOKEN='your_bot_token_here'")
        return
    
    application = Application.builder().token(bot_token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ Finance Tracker —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏...")
    application.run_polling()

if __name__ == '__main__':
    main() 
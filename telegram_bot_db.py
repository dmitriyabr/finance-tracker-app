#!/usr/bin/env python3
"""
Telegram –±–æ—Ç Finance Tracker —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from google.cloud import vision
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI (headless mode)
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io
from matplotlib import rcParams

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
rcParams['font.family'] = ['DejaVu Sans', 'Arial', 'sans-serif']
rcParams['font.size'] = 10
rcParams['figure.figsize'] = (10, 8)
rcParams['savefig.dpi'] = 150
rcParams['savefig.bbox'] = 'tight'
rcParams['savefig.pad_inches'] = 0.1

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from models import create_session, Account, Transaction, SystemInfo, convert_to_usd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FinanceTrackerBotDB:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Vision API
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GOOGLE_CREDENTIALS_CONTENT
            credentials_content = os.environ.get('GOOGLE_CREDENTIALS_CONTENT')
            if credentials_content:
                print("üîß –°–æ–∑–¥–∞—é credentials –∏–∑ GOOGLE_CREDENTIALS_CONTENT...")
                import tempfile
                with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                    f.write(credentials_content)
                    temp_credentials_path = f.name
                    print(f"üìù –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_credentials_path}")
                
                os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = temp_credentials_path
                self.vision_client = vision.ImageAnnotatorClient()
                print("‚úÖ Google Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ GOOGLE_CREDENTIALS_CONTENT!")
            else:
                print("‚ùå GOOGLE_CREDENTIALS_CONTENT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                self.vision_client = None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Vision: {e}")
            self.vision_client = None
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç (—Ç–µ –∂–µ, —á—Ç–æ –∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
        self.currency_patterns = {
            'RUB': [
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*–†',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*—Ä—É–±',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*—Ä—É–±–ª'
            ],
            'USD': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*\$',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*USD',
                r'\$(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'EUR': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*‚Ç¨',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*EUR',
                r'‚Ç¨(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'AED': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*AED',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*–¥–∏—Ä—Ö–∞–º',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*ÿØ\.ÿ•'
            ],
            'IDR': [
                r'Rp\s*(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)',
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)\s*Rp',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{3})?)\s*—Ä—É–ø–∏–π'
            ]
        }

    def fix_russian_number_format(self, text, currency):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∏—Å–µ–ª"""
        if currency == 'RUB':
            russian_pattern = r'(\d{1,3}(?:\s\d{3})*),(\d{2})'
            match = re.search(russian_pattern, text)
            if match:
                whole_part = match.group(1).replace(' ', '').replace(',', '')
                decimal_part = match.group(2)
                correct_number = f"{whole_part}.{decimal_part}"
                try:
                    float(correct_number)
                    return correct_number
                except ValueError:
                    pass
        return None

    def extract_balance_from_text(self, text_lines):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        balances = []
        
        for text in text_lines:
            text_lower = text.lower()
            
            for currency, patterns in self.currency_patterns.items():
                for pattern in patterns:
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    if matches:
                        for match in matches:
                            clean_number = match.replace(' ', '').replace(',', '')
                            try:
                                float(clean_number)
                                balances.append({
                                    'value': clean_number,
                                    'currency': currency,
                                    'original_text': text,
                                    'pattern': pattern
                                })
                            except ValueError:
                                continue
        
        return balances

    def process_image_with_db(self, image_content):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î"""
        if not self.vision_client:
            return {'success': False, 'error': 'Google Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            image = vision.Image(content=image_content)
            response = self.vision_client.text_detection(image=image)
            texts = response.text_annotations
            
            if not texts:
                return {'success': False, 'error': '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            full_text = texts[0].description
            text_lines = full_text.split('\n')
            
            balances = self.extract_balance_from_text(text_lines)
            
            if balances:
                for balance in balances:
                    if balance['currency'] == 'RUB':
                        corrected_number = self.fix_russian_number_format(
                            balance['original_text'], 
                            balance['currency']
                        )
                        if corrected_number:
                            balance['value'] = corrected_number
                            balance['corrected'] = True
                
                main_balance = max(balances, key=lambda x: float(x['value']))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                session = create_session()
                try:
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ –≤–∞–ª—é—Ç–µ
                    account = session.query(Account).filter_by(
                        currency=main_balance['currency']
                    ).first()
                    
                    if not account:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
                        account_names = {
                            'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—á–µ—Ç',
                            'USD': '–î–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç',
                            'EUR': '–ï–≤—Ä–æ —Å—á–µ—Ç',
                            'AED': '–î–∏—Ä—Ö–∞–º–æ–≤—ã–π —Å—á–µ—Ç',
                            'IDR': '–†—É–ø–∏–µ–≤—ã–π —Å—á–µ—Ç'
                        }
                        
                        account_name = account_names.get(main_balance['currency'], f'–°—á–µ—Ç –≤ {main_balance["currency"]}')
                        
                        account = Account(
                            name=account_name,
                            currency=main_balance['currency'],
                            balance=0,
                            balance_usd=0,
                            last_updated=datetime.utcnow()
                        )
                        session.add(account)
                        session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    old_balance = account.balance
                    account.balance = float(main_balance['value'])
                    account.balance_usd = convert_to_usd(account.balance, account.currency)
                    account.last_updated = datetime.utcnow()
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    transaction = Transaction(
                        account_id=account.id,
                        timestamp=datetime.utcnow(),
                        old_balance=old_balance,
                        new_balance=account.balance,
                        change=account.balance - old_balance,
                        source='telegram',
                        original_text=main_balance.get('original_text', '')
                    )
                    session.add(transaction)
                    
                    session.commit()
                    
                    return {
                        'success': True,
                        'main_balance': main_balance,
                        'all_balances': balances,
                        'account': {
                            'id': account.id,
                            'name': account.name,
                            'currency': account.currency,
                            'balance': account.balance,
                            'balance_usd': account.balance_usd
                        },
                        'text_lines': text_lines,
                        'full_text': full_text
                    }
                    
                except Exception as e:
                    session.rollback()
                    raise e
                finally:
                    session.close()
            else:
                return {
                    'success': False,
                    'balance': None,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'balance': None,
                'error': str(e)
            }

    def get_accounts_summary(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º –∏–∑ –ë–î"""
        try:
            session = create_session()
            accounts = session.query(Account).all()
            
            accounts_data = []
            total_balance_usd = 0
            
            for account in accounts:
                accounts_data.append({
                    'id': account.id,
                    'name': account.name,
                    'currency': account.currency,
                    'balance': account.balance,
                    'balance_usd': account.balance_usd,
                    'last_updated': account.last_updated
                })
                total_balance_usd += account.balance_usd
            
            return {
                'accounts': accounts_data,
                'total_balance_usd': round(total_balance_usd, 2),
                'total_count': len(accounts_data)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {'accounts': [], 'total_balance_usd': 0, 'total_count': 0}
        finally:
            session.close()

    def create_balance_chart(self):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º"""
        try:
            accounts_data = self.get_accounts_summary()
            
            if not accounts_data['accounts']:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            fig, ax = plt.subplots(figsize=(10, 8))
            
            labels = []
            sizes = []
            colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
            
            for i, account in enumerate(accounts_data['accounts']):
                labels.append(account['name'])
                sizes.append(account['balance_usd'])
            
            if not sizes or sum(sizes) == 0:
                plt.close(fig)
                return None
            
            wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%', 
                                             colors=colors[:len(sizes)], startangle=90)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
            
            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º', fontsize=16, fontweight='bold', pad=20)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            total_usd = accounts_data['total_balance_usd']
            ax.text(0, -1.2, f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_usd:,.2f}', 
                   ha='center', fontsize=14, fontweight='bold',
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            return img_buffer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            try:
                plt.close('all')
            except:
                pass
            return None

    def create_total_balance_history_chart(self):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –≤ USD"""
        try:
            session = create_session()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            transactions = session.query(Transaction).order_by(Transaction.timestamp).all()
            
            if not transactions:
                session.close()
                return None
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Å—É–º–º–∏—Ä—É–µ–º
            from collections import defaultdict
            daily_totals = defaultdict(float)
            
            for transaction in transactions:
                date = transaction.timestamp.date()
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ USD
                account = session.query(Account).filter_by(id=transaction.account_id).first()
                if account:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    transaction_usd = transaction.new_balance * convert_to_usd(1, account.currency)
                    daily_totals[date] += transaction_usd
            
            if not daily_totals:
                session.close()
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            dates = sorted(daily_totals.keys())
            totals = [daily_totals[date] for date in dates]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ datetime –æ–±—ä–µ–∫—Ç—ã
            date_objects = [datetime.combine(date, datetime.min.time()) for date in dates]
            
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
            ax.plot(date_objects, totals, 'o-', linewidth=2, markersize=6, color='#36A2EB')
            ax.fill_between(date_objects, totals, alpha=0.3, color='#36A2EB')
            
            ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤—Å–µ —Å—á–µ—Ç–∞)', fontsize=16, fontweight='bold')
            ax.set_ylabel('–û–±—â–∏–π –±–∞–ª–∞–Ω—Å (USD)', fontsize=12)
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            accounts_data = self.get_accounts_summary()
            current_total = accounts_data['total_balance_usd']
            
            ax.text(0.02, 0.98, f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_total:,.2f}', 
                   transform=ax.transAxes, fontsize=12, fontweight='bold',
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7),
                   verticalalignment='top')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            session.close()
            return img_buffer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏: {e}")
            try:
                plt.close('all')
            except:
                pass
            return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
finance_bot = FinanceTrackerBotDB()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    accounts_data = finance_bot.get_accounts_summary()
    
    welcome_text = "üí∞ **Finance Tracker Bot —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö**\n\n"
    
    if accounts_data['total_count'] > 0:
        welcome_text += f"üíµ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accounts_data['total_balance_usd']:,.2f}**\n\n"
        welcome_text += "üè¶ **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n"
        
        for account in accounts_data['accounts']:
            welcome_text += f"‚Ä¢ {account['name']}: {account['balance']:,.2f} {account['currency']} (‚âà ${account['balance_usd']:,.2f})\n"
        
        welcome_text += "\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!"
    else:
        welcome_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!"
    
    welcome_text += "\n\nüìä **–ö–æ–º–∞–Ω–¥—ã:**\n"
    welcome_text += "/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
    welcome_text += "/history - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –¥–∏–Ω–∞–º–∏–∫—É\n"
    welcome_text += "/help - —Å–ø—Ä–∞–≤–∫–∞"
    
    keyboard = [
        [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", callback_data="show_balance_chart")],
        [InlineKeyboardButton("üìà –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", callback_data="show_total_history")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üì± **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏

üîç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:**
‚Ä¢ ‚ÇΩ RUB (—Ä—É–±–ª–∏), $ USD (–¥–æ–ª–ª–∞—Ä—ã), ‚Ç¨ EUR (–µ–≤—Ä–æ)
‚Ä¢ AED (–¥–∏—Ä—Ö–∞–º—ã), Rp IDR (—Ä—É–ø–∏–∏)

üí∞ **–°–∏—Å—Ç–µ–º–∞ —Å—á–µ—Ç–æ–≤:**
‚Ä¢ –ö–∞–∂–¥–∞—è –≤–∞–ª—é—Ç–∞ = –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –∞ –Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ –í—Å–µ –≤–∞–ª—é—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä—ã
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º

üìä **–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
/history - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –¥–∏–Ω–∞–º–∏–∫—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìà **–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º
‚Ä¢ –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –≤ USD
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫"""
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞...")
    
    chart_buffer = finance_bot.create_balance_chart()
    
    if chart_buffer:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=chart_buffer,
            caption="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏...")
    
    chart_buffer = finance_bot.create_total_balance_history_chart()
    
    if chart_buffer:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=chart_buffer,
            caption="üìä –î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤—Å–µ —Å—á–µ—Ç–∞)\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        photo = update.message.photo[-1]
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        file = await context.bot.get_file(photo.file_id)
        image_content = await file.download_as_bytearray()
        image_bytes = bytes(image_content)
        
        result = finance_bot.process_image_with_db(image_bytes)
        
        if result['success']:
            account = result['account']
            
            success_text = f"‚úÖ **–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            success_text += f"üè¶ **–°—á–µ—Ç:** {account['name']}\n"
            success_text += f"üí∞ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {account['balance']:,.2f} {account['currency']}\n"
            success_text += f"üíµ **–í –¥–æ–ª–ª–∞—Ä–∞—Ö:** ${account['balance_usd']:,.2f}\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            accounts_data = finance_bot.get_accounts_summary()
            success_text += f"\nüí∞ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:** ${accounts_data['total_balance_usd']:,.2f}"
            
            keyboard = [
                [InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="show_balance_chart")],
                [InlineKeyboardButton("üìä –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", callback_data="show_total_history")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await processing_msg.edit_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        else:
            error_text = f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å**\n\n"
            error_text += f"üîç **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n"
            
            if result.get('text_lines'):
                for i, line in enumerate(result['text_lines'][:5]):
                    if line.strip():
                        error_text += f"{i+1}. {line}\n"
            
            error_text += "\nüí° **–°–æ–≤–µ—Ç—ã:**\n"
            error_text += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω\n"
            error_text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å\n"
            error_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            await processing_msg.edit_text(error_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "show_balance_chart":
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞...")
        
        chart_buffer = finance_bot.create_balance_chart()
        
        if chart_buffer:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=chart_buffer,
                caption="üí∞ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
    
    elif query.data == "show_total_history":
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏...")
        
        chart_buffer = finance_bot.create_total_balance_history_chart()
        
        if chart_buffer:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=chart_buffer,
                caption="üìä **–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤—Å–µ —Å—á–µ—Ç–∞)**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏.")
    
    elif query.data == "back_to_main":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        accounts_data = finance_bot.get_accounts_summary()
        
        welcome_text = "üí∞ **Finance Tracker Bot —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö**\n\n"
        
        if accounts_data['total_count'] > 0:
            welcome_text += f"üíµ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accounts_data['total_balance_usd']:,.2f}**\n\n"
            welcome_text += "üè¶ **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n"
            
            for account in accounts_data['accounts']:
                welcome_text += f"‚Ä¢ {account['name']}: {account['balance']:,.2f} {account['currency']} (‚âà ${account['balance_usd']:,.2f})\n"
            
            welcome_text += "\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!"
        else:
            welcome_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\nüì± **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!"
        
        welcome_text += "\n\nüìä **–ö–æ–º–∞–Ω–¥—ã:**\n"
        welcome_text += "/balance - –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
        welcome_text += "/history - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –¥–∏–Ω–∞–º–∏–∫—É\n"
        welcome_text += "/help - —Å–ø—Ä–∞–≤–∫–∞"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", callback_data="show_balance_chart")],
                [InlineKeyboardButton("üìà –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", callback_data="show_total_history")]
            ]),
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except:
            pass

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")
    
    try:
        if update and hasattr(update, 'effective_message') and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        elif update and hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ error_handler: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("–ü—Ä–∏–º–µ—Ä: export TELEGRAM_BOT_TOKEN='your_bot_token_here'")
        return
    
    application = Application.builder().token(bot_token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ Finance Tracker —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    application.run_polling()

if __name__ == '__main__':
    main() 
import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from google.cloud import vision
import json
from datetime import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FinanceTrackerBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.data_file = 'finance_data.json'
        self.load_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Vision API
        try:
            # –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ credentials
            if not os.environ.get('GOOGLE_APPLICATION_CREDENTIALS'):
                os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = os.path.join(
                    os.path.dirname(os.path.abspath(__file__)), 
                    'google-credentials.json'
                )
            
            self.vision_client = vision.ImageAnnotatorClient()
            logger.info("‚úÖ Google Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Vision: {e}")
            self.vision_client = None
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
        self.currency_patterns = {
            'RUB': [
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*–†',  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*—Ä—É–±',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*—Ä—É–±–ª'
            ],
            'USD': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*\$',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*USD',
                r'\$(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'EUR': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*‚Ç¨',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*EUR',
                r'‚Ç¨(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'AED': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*AED',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*–¥–∏—Ä—Ö–∞–º',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*ÿØ\.ÿ•'
            ],
            'IDR': [
                r'Rp\s*(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)',
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)\s*Rp',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{3})?)\s*—Ä—É–ø–∏–π'
            ]
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        self.balance_keywords = [
            'balance', 'total', 'available', 'current', 'main', 'cash',
            '–±–∞–ª–∞–Ω—Å', '–¥–æ—Å—Ç—É–ø–Ω–æ', '–æ—Å–Ω–æ–≤–Ω–æ–π', '—Ç–µ–∫—É—â–∏–π', '–æ–±—â–∏–π', '–Ω–∞–ª–∏—á–Ω—ã–µ'
        ]

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.data = {'accounts': {}, 'total_balance_usd': 0, 'last_updated': None}
        else:
            self.data = {'accounts': {}, 'total_balance_usd': 0, 'last_updated': None}
            logger.info("üìÅ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def extract_balance_from_text(self, text_lines):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        balances = []
        
        for text in text_lines:
            text_lower = text.lower()
            
            # –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
            for currency, patterns in self.currency_patterns.items():
                for pattern in patterns:
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    if matches:
                        for match in matches:
                            # –û—á–∏—â–∞–µ–º —á–∏—Å–ª–æ
                            clean_number = match.replace(' ', '').replace(',', '')
                            
                            try:
                                float(clean_number)
                                balances.append({
                                    'value': clean_number,
                                    'currency': currency,
                                    'original_text': text,
                                    'pattern': pattern
                                })
                            except ValueError:
                                continue
            
            # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            for keyword in self.balance_keywords:
                if keyword in text_lower:
                    for currency, patterns in self.currency_patterns.items():
                        for pattern in patterns:
                            matches = re.findall(pattern, text, re.IGNORECASE)
                            if matches:
                                for match in matches:
                                    clean_number = match.replace(' ', '').replace(',', '')
                                    try:
                                        float(clean_number)
                                        balances.append({
                                            'value': clean_number,
                                            'currency': currency,
                                            'original_text': text,
                                            'keyword': keyword,
                                            'pattern': pattern
                                        })
                                    except ValueError:
                                        continue
        
        return balances

    def fix_russian_number_format(self, text, currency):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∏—Å–µ–ª (–∑–∞–ø—è—Ç–∞—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤)"""
        if currency == 'RUB':
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "250 288,30" –∏–ª–∏ "250288,30"
            # –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∏—Å–µ–ª: —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç–∞—è, 2 —Ü–∏—Ñ—Ä—ã
            russian_pattern = r'(\d{1,3}(?:\s\d{3})*),(\d{2})'
            match = re.search(russian_pattern, text)
            
            if match:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—É—é –∏ –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç–∏
                whole_part = match.group(1).replace(' ', '')  # "250288"
                whole_part = whole_part.replace(',', '')  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø—è—Ç—ã–µ
                decimal_part = match.group(2)  # "30"
                
                # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
                correct_number = f"{whole_part}.{decimal_part}"
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ
                    float(correct_number)
                    return correct_number
                except ValueError:
                    pass
        
        return None

    def process_image(self, image_content):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision"""
        if not self.vision_client:
            return {'success': False, 'error': 'Google Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = vision.Image(content=image_content)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            response = self.vision_client.text_detection(image=image)
            texts = response.text_annotations
            
            if not texts:
                return {'success': False, 'error': '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            full_text = texts[0].description
            text_lines = full_text.split('\n')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.extract_balance_from_text(text_lines)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π
            if balances:
                for balance in balances:
                    if balance['currency'] == 'RUB':
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞
                        corrected_number = self.fix_russian_number_format(
                            balance['original_text'], 
                            balance['currency']
                        )
                        if corrected_number:
                            balance['value'] = corrected_number
                            balance['corrected'] = True
            
            if balances:
                # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é)
                main_balance = max(balances, key=lambda x: float(x['value']))
                
                return {
                    'success': True,
                    'main_balance': main_balance,
                    'all_balances': balances,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
            else:
                return {
                    'success': False,
                    'balance': None,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'balance': None,
                'error': str(e)
            }

    def identify_account(self, balance_data, image_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç—Ç–æ —Å—á–µ—Ç –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ –≤–∞–ª—é—Ç–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        currency = balance_data['currency']
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—á–µ—Ç —Å —Ç–∞–∫–æ–π –≤–∞–ª—é—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        for account_id, account in self.data['accounts'].items():
            if account['currency'] == currency:
                return account_id
        
        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—á–µ—Ç
        account_id = f"account_{len(self.data['accounts']) + 1}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ –≤–∞–ª—é—Ç–µ
        account_names = {
            'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—á–µ—Ç',
            'USD': '–î–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç',
            'EUR': '–ï–≤—Ä–æ —Å—á–µ—Ç',
            'AED': '–î–∏—Ä—Ö–∞–º–æ–≤—ã–π —Å—á–µ—Ç',
            'IDR': '–†—É–ø–∏–µ–≤—ã–π —Å—á–µ—Ç'
        }
        
        account_name = account_names.get(currency, f'–°—á–µ—Ç –≤ {currency}')
        
        self.data['accounts'][account_id] = {
            'name': account_name,
            'currency': currency,
            'balance': 0,
            'balance_usd': 0,
            'last_updated': None,
            'transactions': []
        }
        
        return account_id

    def update_account_balance(self, account_id, balance_data, source='telegram'):
        """–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ (–Ω–µ —Å—É–º–º–∏—Ä—É–µ–º, –∞ –∑–∞–º–µ–Ω—è–µ–º)"""
        timestamp = datetime.now().isoformat()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç
        account = self.data['accounts'][account_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        old_balance = account['balance']
        account['balance'] = float(balance_data['value'])
        account['last_updated'] = timestamp
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã
        account['balance_usd'] = self.convert_to_usd(account['balance'], account['currency'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = {
            'id': len(account['transactions']) + 1,
            'timestamp': timestamp,
            'old_balance': old_balance,
            'new_balance': account['balance'],
            'change': account['balance'] - old_balance,
            'source': source,
            'original_text': balance_data.get('original_text', '')
        }
        
        account['transactions'].append(transaction)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        self.update_total_balance_usd()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_data()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ {account_id}: {account['balance']} {account['currency']} (${account['balance_usd']:.2f})")
        return transaction

    def convert_to_usd(self, amount, currency):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É –≤ –¥–æ–ª–ª–∞—Ä—ã"""
        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API)
        conversion_rates = {
            'RUB': 0.011,  # 1 RUB = 0.011 USD
            'USD': 1.0,    # 1 USD = 1 USD
            'EUR': 1.09,   # 1 EUR = 1.09 USD
            'AED': 0.27,   # 1 AED = 0.27 USD
            'IDR': 0.000065 # 1 IDR = 0.000065 USD
        }
        
        if currency in conversion_rates:
            return amount * conversion_rates[currency]
        else:
            return amount  # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å

    def update_total_balance_usd(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö"""
        total_usd = 0
        for account in self.data['accounts'].values():
            total_usd += account['balance_usd']
        
        self.data['total_balance_usd'] = round(total_usd, 2)
        self.data['last_updated'] = datetime.now().isoformat()

    def get_accounts_summary(self, limit=10):
        """–ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        return {
            'accounts': self.data['accounts'],
            'total_balance_usd': self.data['total_balance_usd'],
            'last_updated': self.data['last_updated'],
            'total_count': len(self.data['accounts'])
        }

    def get_account_history(self, account_id, limit=20):
        """–ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Å—á–µ—Ç—É"""
        if account_id in self.data['accounts']:
            account = self.data['accounts'][account_id]
            return {
                'account': account,
                'transactions': account['transactions'][-limit:]
            }
        return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
finance_tracker = FinanceTrackerBot()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üí∞ **Finance Tracker Bot**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—é –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞!

üì± **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç
3. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é —Å—á–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—é –±–∞–ª–∞–Ω—Å
4. –í—Å–µ –≤–∞–ª—é—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä—ã

üîç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:**
‚Ä¢ ‚ÇΩ RUB (—Ä—É–±–ª–∏)
‚Ä¢ $ USD (–¥–æ–ª–ª–∞—Ä—ã)
‚Ä¢ ‚Ç¨ EUR (–µ–≤—Ä–æ)
‚Ä¢ AED (–¥–∏—Ä—Ö–∞–º—ã)
‚Ä¢ Rp IDR (—Ä—É–ø–∏–∏)

üìä **–ö–æ–º–∞–Ω–¥—ã:**
/balance - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
"""
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="show_balance")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üì± **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, JPEG

üîç **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:**
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –≤—Å–µ —Å—É–º–º—ã –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
‚Ä¢ –í—ã–±–µ—Ä–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (—Å–∞–º—É—é –±–æ–ª—å—à—É—é —Å—É–º–º—É)
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–∞–∫–æ–π —ç—Ç–æ —Å—á–µ—Ç –ø–æ –≤–∞–ª—é—Ç–µ
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç –±–∞–ª–∞–Ω—Å (–Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç!)

üí∞ **–°–∏—Å—Ç–µ–º–∞ —Å—á–µ—Ç–æ–≤:**
‚Ä¢ –ö–∞–∂–¥–∞—è –≤–∞–ª—é—Ç–∞ = –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç
‚Ä¢ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –∞ –Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ –í—Å–µ –≤–∞–ª—é—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä—ã
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

üìä **–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/balance - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –î–µ–ª–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞–∑–º—ã—Ç
‚Ä¢ –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
    accounts_data = finance_tracker.get_accounts_summary()
    
    if accounts_data['total_count'] == 0:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
    total_balance_usd = accounts_data['total_balance_usd']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
    balance_text = f"üí∞ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance_usd:,.2f}**\n\n"
    balance_text += "üè¶ **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n"
    
    for account_id, account in accounts_data['accounts'].items():
        currency_symbol = get_currency_symbol(account['currency'])
        date = account['last_updated'][:10] if account['last_updated'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        
        balance_text += f"‚Ä¢ **{account['name']}**\n"
        balance_text += f"  {currency_symbol}{account['balance']:,.2f} ({account['currency']})\n"
        balance_text += f"  ‚âà ${account['balance_usd']:,.2f}\n"
        balance_text += f"  üìÖ {date}\n\n"
    
    balance_text += f"üìà **–í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤:** {accounts_data['total_count']}"
    
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="show_history")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_balance")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(balance_text, reply_markup=reply_markup, parse_mode='Markdown')

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    accounts_data = finance_tracker.get_accounts_summary()
    
    if accounts_data['total_count'] == 0:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç!")
        return
    
    history_text = f"üìä **–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º
    for account_id, account in accounts_data['accounts'].items():
        history_text += f"üè¶ **{account['name']}**\n"
        history_text += f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_currency_symbol(account['currency'])}{account['balance']:,.2f} ({account['currency']})\n"
        history_text += f"–í –¥–æ–ª–ª–∞—Ä–∞—Ö: ${account['balance_usd']:,.2f}\n\n"
        
        if account['transactions']:
            history_text += "üìà **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            for transaction in account['transactions'][-5:]:
                date = transaction['timestamp'][:19].replace('T', ' ')
                change = transaction['change']
                change_text = f"+{change:,.2f}" if change > 0 else f"{change:,.2f}"
                change_emoji = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
                
                history_text += f"{change_emoji} {change_text} ({date})\n"
        else:
            history_text += "üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞\n"
        
        history_text += "\n" + "‚îÄ" * 30 + "\n\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(history_text) > 4000:
        parts = [history_text[i:i+4000] for i in range(0, len(history_text), 4000)]
        for i, part in enumerate(parts):
            await update.message.reply_text(f"üìä **–ò—Å—Ç–æ—Ä–∏—è (—á–∞—Å—Ç—å {i+1}/{len(parts)})**\n\n{part}", parse_mode='Markdown')
    else:
        await update.message.reply_text(history_text, parse_mode='Markdown')

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = update.message.photo[-1]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await context.bot.get_file(photo.file_id)
        image_content = await file.download_as_bytearray()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytearray –≤ bytes –¥–ª—è Google Vision API
        image_bytes = bytes(image_content)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Google Vision
        result = finance_tracker.process_image(image_bytes)
        
        if result['success']:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç—Ç–æ —Å—á–µ—Ç
            account_id = finance_tracker.identify_account(
                result['main_balance'], 
                result['full_text']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
            transaction = finance_tracker.update_account_balance(
                account_id,
                result['main_balance'], 
                source='telegram'
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            main_balance = result['main_balance']
            currency_symbol = get_currency_symbol(main_balance['currency'])
            account = finance_tracker.data['accounts'][account_id]
            
            success_text = f"‚úÖ **–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            success_text += f"üè¶ **–°—á–µ—Ç:** {account['name']}\n"
            success_text += f"üí∞ **–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:** {currency_symbol}{main_balance['value']} ({main_balance['currency']})\n"
            success_text += f"üíµ **–í –¥–æ–ª–ª–∞—Ä–∞—Ö:** ${account['balance_usd']:,.2f}\n"
            
            if transaction['change'] != 0:
                change_emoji = "üìà" if transaction['change'] > 0 else "üìâ"
                change_text = f"+{transaction['change']:,.2f}" if transaction['change'] > 0 else f"{transaction['change']:,.2f}"
                success_text += f"{change_emoji} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {change_text} {main_balance['currency']}\n"
            
            if len(result['all_balances']) > 1:
                success_text += f"\nüîç **–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É–º–º—ã:**\n"
                for balance in result['all_balances']:
                    symbol = get_currency_symbol(balance['currency'])
                    success_text += f"‚Ä¢ {symbol}{balance['value']} ({balance['currency']})\n"
            
            if main_balance['original_text']:
                success_text += f"\nüìù **–ò—Å—Ç–æ—á–Ω–∏–∫:** \"{main_balance['original_text'][:100]}{'...' if len(main_balance['original_text']) > 100 else ''}\""
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            accounts_data = finance_tracker.get_accounts_summary()
            success_text += f"\n\nüí∞ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:** ${accounts_data['total_balance_usd']:,.2f}"
            
            keyboard = [
                [InlineKeyboardButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="show_balance")],
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await processing_msg.edit_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        else:
            error_text = f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å**\n\n"
            error_text += f"üîç **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n"
            
            if result.get('text_lines'):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                for i, line in enumerate(result['text_lines'][:10]):
                    if line.strip():
                        error_text += f"{i+1}. {line}\n"
            
            error_text += "\nüí° **–°–æ–≤–µ—Ç—ã:**\n"
            error_text += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω\n"
            error_text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å\n"
            error_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            await processing_msg.edit_text(error_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –∫–æ–º–∞–Ω–¥
    fake_update = type('Update', (), {
        'message': query.message,
        'effective_message': query.message
    })()
    
    if query.data == "show_balance":
        await balance_command(fake_update, context)
    elif query.data == "show_history":
        await history_command(fake_update, context)
    elif query.data == "help":
        await help_command(fake_update, context)
    elif query.data == "refresh_balance":
        await balance_command(fake_update, context)

def get_currency_symbol(currency):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã"""
    symbols = {
        'RUB': '‚ÇΩ',
        'USD': '$',
        'EUR': '‚Ç¨',
        'AED': 'AED',
        'IDR': 'Rp'
    }
    return symbols.get(currency, currency)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("–ü—Ä–∏–º–µ—Ä: export TELEGRAM_BOT_TOKEN='your_bot_token_here'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ Finance Tracker...")
    application.run_polling()

if __name__ == '__main__':
    main() 
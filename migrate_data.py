#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–µ—Ç–æ–≤
"""

import json
import os
from datetime import datetime

def migrate_data():
    """–ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –Ω–æ–≤—É—é"""
    
    # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not os.path.exists('finance_data.json'):
        print("‚ùå –§–∞–π–ª finance_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open('finance_data.json', 'r', encoding='utf-8') as f:
        old_data = json.load(f)
    
    print("üìä –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {len(old_data.get('balances', []))}")
    print(f"   ‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {old_data.get('total_balance', 0)}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    new_data = {
        'accounts': {},
        'total_balance_usd': 0,
        'last_updated': None
    }
    
    # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã
    conversion_rates = {
        'RUB': 0.011,  # 1 RUB = 0.011 USD
        'USD': 1.0,    # 1 USD = 1 USD
        'EUR': 1.09,   # 1 EUR = 1.09 USD
        'AED': 0.27,   # 1 AED = 0.27 USD
        'IDR': 0.000065 # 1 IDR = 0.000065 USD
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤–∞–ª—é—Ç–∞–º
    currency_groups = {}
    
    for balance in old_data.get('balances', []):
        currency = balance['currency']
        value = float(balance['value'])
        
        if currency not in currency_groups:
            currency_groups[currency] = []
        
        currency_groups[currency].append({
            'value': value,
            'timestamp': balance['timestamp'],
            'source': balance['source'],
            'original_text': balance.get('original_text', '')
        })
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
    for currency, balances in currency_groups.items():
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å (—Å–∞–º—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
        latest_balance = max(balances, key=lambda x: x['timestamp'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
        account_names = {
            'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—á–µ—Ç',
            'USD': '–î–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç',
            'EUR': '–ï–≤—Ä–æ —Å—á–µ—Ç',
            'AED': '–î–∏—Ä—Ö–∞–º–æ–≤—ã–π —Å—á–µ—Ç',
            'IDR': '–†—É–ø–∏–µ–≤—ã–π —Å—á–µ—Ç'
        }
        
        account_name = account_names.get(currency, f'–°—á–µ—Ç –≤ {currency}')
        account_id = f"account_{len(new_data['accounts']) + 1}"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã
        balance_usd = latest_balance['value'] * conversion_rates.get(currency, 1.0)
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
        new_data['accounts'][account_id] = {
            'name': account_name,
            'currency': currency,
            'balance': latest_balance['value'],
            'balance_usd': balance_usd,
            'last_updated': latest_balance['timestamp'],
            'transactions': []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for i, balance in enumerate(balances):
            transaction = {
                'id': i + 1,
                'timestamp': balance['timestamp'],
                'old_balance': 0 if i == 0 else balances[i-1]['value'],
                'new_balance': balance['value'],
                'change': balance['value'] - (0 if i == 0 else balances[i-1]['value']),
                'source': balance['source'],
                'original_text': balance['original_text']
            }
            new_data['accounts'][account_id]['transactions'].append(transaction)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    total_usd = sum(account['balance_usd'] for account in new_data['accounts'].values())
    new_data['total_balance_usd'] = round(total_usd, 2)
    new_data['last_updated'] = datetime.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('finance_data_new.json', 'w', encoding='utf-8') as f:
        json.dump(new_data, f, ensure_ascii=False, indent=2)
    
    print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å—á–µ—Ç–æ–≤: {len(new_data['accounts'])}")
    print(f"   ‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${new_data['total_balance_usd']:,.2f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å—á–µ—Ç–∞–º
    for account_id, account in new_data['accounts'].items():
        print(f"   ‚Ä¢ {account['name']}: {account['balance']:,.2f} {account['currency']} (‚âà ${account['balance_usd']:,.2f})")
    
    print("\nüìÅ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ finance_data_new.json")
    print("üí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª –≤ finance_data.json")
    
    return new_data

if __name__ == '__main__':
    migrate_data() 
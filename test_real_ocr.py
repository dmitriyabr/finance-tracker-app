import easyocr
import os
import re
from datetime import datetime
import json

class BankBalanceExtractor:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EasyOCR —Å —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏"""
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ EasyOCR...")
        self.reader = easyocr.Reader(['ru', 'en'])
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        self.balance_patterns = [
            r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ',  # 123 456,78 ‚ÇΩ
            r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*—Ä—É–±',  # 123 456.78 —Ä—É–±
            r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*—Ä—É–±–ª',  # 123 456,78 —Ä—É–±–ª
            r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*RUB',  # 123 456.78 RUB
            r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ',  # 123 456,78 ‚ÇΩ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–∞)
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        self.balance_keywords = [
            '–±–∞–ª–∞–Ω—Å', 'balance', '–¥–æ—Å—Ç—É–ø–Ω–æ', 'available', '—Å—á–µ—Ç', 'account',
            '–∫–∞—Ä—Ç–∞', 'card', '–æ—Å–Ω–æ–≤–Ω–æ–π', 'main', '—Ç–µ–∫—É—â–∏–π', 'current'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ –±–∞–ª–∞–Ω—Å)
        self.exclude_keywords = [
            '–ª–∏–º–∏—Ç', 'limit', '–∫—Ä–µ–¥–∏—Ç', 'credit', '–¥–æ–ª–≥', 'debt', '–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π', 'minimum'
        ]

    def extract_balance_from_text(self, text_list):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        balances = []
        
        for text, confidence in text_list:
            text_lower = text.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
            if any(exclude in text_lower for exclude in self.exclude_keywords):
                continue
                
            # –ò—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for pattern in self.balance_patterns:
                matches = re.findall(pattern, text)
                if matches:
                    for match in matches:
                        # –û—á–∏—â–∞–µ–º —á–∏—Å–ª–æ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
                        clean_number = match.replace(' ', '').replace(',', '.')
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ
                            float(clean_number)
                            balances.append({
                                'value': clean_number,
                                'original_text': text,
                                'confidence': confidence,
                                'pattern': pattern
                            })
                        except ValueError:
                            continue
            
            # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ —Ä—è–¥–æ–º –µ—Å—Ç—å —á–∏—Å–ª–æ)
            for keyword in self.balance_keywords:
                if keyword in text_lower:
                    # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —ç—Ç–æ–º –∂–µ —Ç–µ–∫—Å—Ç–µ
                    numbers = re.findall(r'\d{1,3}(?:\s\d{3})*(?:[,.]\d{2})?', text)
                    if numbers:
                        for number in numbers:
                            clean_number = number.replace(' ', '').replace(',', '.')
                            try:
                                float(clean_number)
                                balances.append({
                                    'value': clean_number,
                                    'original_text': text,
                                    'confidence': confidence,
                                    'keyword': keyword
                                })
                            except ValueError:
                                continue
        
        return balances

    def process_image(self, image_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {os.path.basename(image_path)}")
        print("-" * 50)
        
        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            results = self.reader.readtext(image_path)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            text_list = [(text, confidence) for (bbox, text, confidence) in results]
            
            print("üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
            for text, confidence in text_list:
                print(f"   '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å
            balances = self.extract_balance_from_text(text_list)
            
            if balances:
                print(f"\nüí∞ –ù–∞–π–¥–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: {len(balances)}")
                for i, balance in enumerate(balances, 1):
                    print(f"   {i}. {balance['value']} ‚ÇΩ")
                    print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: '{balance['original_text']}'")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {balance['confidence']:.2f}")
                    if 'pattern' in balance:
                        print(f"      –ù–∞–π–¥–µ–Ω –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {balance['pattern']}")
                    if 'keyword' in balance:
                        print(f"      –ù–∞–π–¥–µ–Ω –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {balance['keyword']}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –≤–µ—Ä–æ—è—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å (—Å –Ω–∞–∏–≤—ã—Å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é)
                best_balance = max(balances, key=lambda x: x['confidence'])
                return {
                    'success': True,
                    'balance': best_balance['value'],
                    'confidence': best_balance['confidence'],
                    'all_balances': balances,
                    'text_list': text_list
                }
            else:
                print("‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    'success': False,
                    'balance': None,
                    'confidence': 0,
                    'all_balances': [],
                    'text_list': text_list
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return {
                'success': False,
                'balance': None,
                'confidence': 0,
                'error': str(e)
            }

    def test_all_screenshots(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –ø–∞–ø–∫–µ"""
        screenshots_dir = "test_screenshots"
        
        if not os.path.exists(screenshots_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {screenshots_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = ['.png', '.jpg', '.jpeg', '.bmp', '.tiff']
        image_files = []
        
        for file in os.listdir(screenshots_dir):
            if any(file.lower().endswith(ext) for ext in image_extensions):
                image_files.append(os.path.join(screenshots_dir, file))
        
        if not image_files:
            print(f"‚ùå –í –ø–∞–ø–∫–µ {screenshots_dir} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
            print("–î–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
            return
        
        print(f"üì± –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        print("=" * 60)
        
        results = []
        
        for image_path in image_files:
            result = self.process_image(image_path)
            result['filename'] = os.path.basename(image_path)
            results.append(result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
        self.save_results(results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_summary(results)
        
        return results

    def save_results(self, results):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"ocr_results_{timestamp}.json"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_data = {
            'timestamp': datetime.now().isoformat(),
            'total_images': len(results),
            'successful_extractions': sum(1 for r in results if r['success']),
            'results': results
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(save_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")

    def show_summary(self, results):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 60)
        
        total = len(results)
        successful = sum(1 for r in results if r['success'])
        failed = total - successful
        
        print(f"üì± –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {failed}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/total)*100:.1f}%")
        
        if successful > 0:
            print(f"\nüí∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
            for result in results:
                if result['success']:
                    print(f"   {result['filename']}: {result['balance']} ‚ÇΩ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")

def main():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OCR –ù–ê –†–ï–ê–õ–¨–ù–´–• –ë–ê–ù–ö–û–í–°–ö–ò–• –°–ö–†–ò–ù–®–û–¢–ê–•")
    print("=" * 60)
    
    extractor = BankBalanceExtractor()
    results = extractor.test_all_screenshots()
    
    if results:
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if any(r['success'] for r in results):
            print("‚úÖ EasyOCR —É—Å–ø–µ—à–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∑–∞–¥–∞—á–µ–π!")
            print("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        else:
            print("‚ùå EasyOCR –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –±–∞–ª–∞–Ω—Å—ã.")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–µ API (Google Vision, Azure).")

if __name__ == "__main__":
    main() 
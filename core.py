#!/usr/bin/env python3
"""
–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Finance Tracker
"""

import os
import re
from datetime import datetime
from google.cloud import vision
from models import create_session, Account, Transaction, SystemInfo, convert_to_usd

class FinanceTrackerCore:
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Vision API
        self.vision_client = self._init_vision_client()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        self.currency_patterns = {
            'RUB': [
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*–†',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*—Ä—É–±',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*—Ä—É–±–ª'
            ],
            'USD': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*\$',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*USD',
                r'\$(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'EUR': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*‚Ç¨',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*EUR',
                r'‚Ç¨(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)'
            ],
            'AED': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*AED',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*–¥–∏—Ä—Ö–∞–º',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*ÿØ\.ÿ•'
            ],
            'IDR': [
                r'Rp\s*(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{3})?)\s*Rp',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{3})?)\s*—Ä—É–ø–∏–π'
            ]
        }
        
        self.balance_keywords = [
            'balance', 'total', 'available', 'current', 'main', 'cash',
            '–±–∞–ª–∞–Ω—Å', '–¥–æ—Å—Ç—É–ø–Ω–æ', '–æ—Å–Ω–æ–≤–Ω–æ–π', '—Ç–µ–∫—É—â–∏–π', '–æ–±—â–∏–π', '–Ω–∞–ª–∏—á–Ω—ã–µ'
        ]

    def _init_vision_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Vision API"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GOOGLE_CREDENTIALS_CONTENT
            credentials_content = os.environ.get('GOOGLE_CREDENTIALS_CONTENT')
            if credentials_content:
                print("üîß –°–æ–∑–¥–∞—é credentials –∏–∑ GOOGLE_CREDENTIALS_CONTENT...")
                import tempfile
                with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                    f.write(credentials_content)
                    temp_credentials_path = f.name
                    print(f"üìù –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_credentials_path}")
                
                os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = temp_credentials_path
                vision_client = vision.ImageAnnotatorClient()
                print("‚úÖ Google Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ GOOGLE_CREDENTIALS_CONTENT!")
                return vision_client
            else:
                print("‚ùå GOOGLE_CREDENTIALS_CONTENT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Vision: {e}")
            return None

    def fix_russian_number_format(self, text, currency):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∏—Å–µ–ª"""
        if currency == 'RUB':
            russian_pattern = r'(\d{1,3}(?:\s\d{3})*),(\d{2})'
            match = re.search(russian_pattern, text)
            if match:
                whole_part = match.group(1).replace(' ', '').replace(',', '')
                decimal_part = match.group(2)
                correct_number = f"{whole_part}.{decimal_part}"
                try:
                    float(correct_number)
                    return correct_number
                except ValueError:
                    pass
        return None

    def extract_balance_from_text(self, text_lines):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        balances = []
        
        for text in text_lines:
            text_lower = text.lower()
            
            for currency, patterns in self.currency_patterns.items():
                for pattern in patterns:
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    if matches:
                        for match in matches:
                            clean_number = match.replace(' ', '').replace(',', '')
                            try:
                                float(clean_number)
                                balances.append({
                                    'value': clean_number,
                                    'currency': currency,
                                    'original_text': text,
                                    'pattern': pattern
                                })
                            except ValueError:
                                continue
            
            for keyword in self.balance_keywords:
                if keyword in text_lower:
                    for currency, patterns in self.currency_patterns.items():
                        for pattern in patterns:
                            matches = re.findall(pattern, text, re.IGNORECASE)
                            if matches:
                                for match in matches:
                                    clean_number = match.replace(' ', '').replace(',', '')
                                    try:
                                        float(clean_number)
                                        balances.append({
                                            'value': clean_number,
                                            'currency': currency,
                                            'original_text': text,
                                            'keyword': keyword,
                                            'pattern': pattern
                                        })
                                    except ValueError:
                                        continue
        
        return balances

    def process_image(self, image_content):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision"""
        if not self.vision_client:
            return {'success': False, 'error': 'Google Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            image = vision.Image(content=image_content)
            response = self.vision_client.text_detection(image=image)
            texts = response.text_annotations
            
            if not texts:
                return {'success': False, 'error': '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            full_text = texts[0].description
            text_lines = full_text.split('\n')
            
            balances = self.extract_balance_from_text(text_lines)
            
            if balances:
                for balance in balances:
                    if balance['currency'] == 'RUB':
                        corrected_number = self.fix_russian_number_format(
                            balance['original_text'], 
                            balance['currency']
                        )
                        if corrected_number:
                            balance['value'] = corrected_number
                            balance['corrected'] = True
                
                main_balance = max(balances, key=lambda x: float(x['value']))
                return {
                    'success': True,
                    'main_balance': main_balance,
                    'all_balances': balances,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
            else:
                return {
                    'success': False,
                    'balance': None,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'balance': None,
                'error': str(e)
            }

    def update_account_balance_from_image(self, balance_data, image_text, source='web'):
        """–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –≤ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            session = create_session()
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ –≤–∞–ª—é—Ç–µ
            account = session.query(Account).filter_by(
                currency=balance_data['currency']
            ).first()
            
            if not account:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
                account_names = {
                    'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—á–µ—Ç',
                    'USD': '–î–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç',
                    'EUR': '–ï–≤—Ä–æ —Å—á–µ—Ç',
                    'AED': '–î–∏—Ä—Ö–∞–º–æ–≤—ã–π —Å—á–µ—Ç',
                    'IDR': '–†—É–ø–∏–µ–≤—ã–π —Å—á–µ—Ç'
                }
                
                account_name = account_names.get(balance_data['currency'], f'–°—á–µ—Ç –≤ {balance_data["currency"]}')
                
                account = Account(
                    name=account_name,
                    currency=balance_data['currency'],
                    balance=0,
                    balance_usd=0,
                    last_updated=datetime.utcnow()
                )
                session.add(account)
                session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            old_balance = account.balance
            account.balance = float(balance_data['value'])
            account.balance_usd = convert_to_usd(account.balance, account.currency)
            account.last_updated = datetime.utcnow()
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction(
                account_id=account.id,
                timestamp=datetime.utcnow(),
                old_balance=old_balance,
                new_balance=account.balance,
                change=account.balance - old_balance,
                source=source,
                original_text=image_text
            )
            session.add(transaction)
            
            session.commit()
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ {account.id}: {account.balance} {account.currency} (${account.balance_usd:.2f})")
            
            return {
                'success': True,
                'account': {
                    'id': account.id,
                    'name': account.name,
                    'currency': account.currency,
                    'balance': account.balance,
                    'balance_usd': account.balance_usd,
                    'last_updated': account.last_updated.isoformat()
                },
                'change': account.balance - old_balance
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            session.rollback()
            return {
                'success': False,
                'error': str(e)
            }
        finally:
            session.close()

    def get_accounts_summary(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        try:
            session = create_session()
            accounts = session.query(Account).all()
            
            total_balance_usd = sum(account.balance_usd for account in accounts)
            
            return {
                'total_balance_usd': total_balance_usd,
                'accounts_count': len(accounts)
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º: {e}")
            return {
                'total_balance_usd': 0,
                'accounts_count': 0
            }
        finally:
            session.close()

    def get_accounts_details(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        try:
            session = create_session()
            accounts = session.query(Account).all()
            
            accounts_details = {}
            for account in accounts:
                accounts_details[account.id] = {
                    'name': account.name,
                    'currency': account.currency,
                    'balance': account.balance,
                    'balance_usd': account.balance_usd,
                    'last_updated': account.last_updated.isoformat() if account.last_updated else None
                }
            
            return accounts_details
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ —Å—á–µ—Ç–∞–º: {e}")
            return {}
        finally:
            session.close()

    def get_accounts_for_api(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –¥–ª—è API"""
        try:
            session = create_session()
            accounts = session.query(Account).all()
            
            accounts_data = []
            total_balance_usd = 0
            
            for account in accounts:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
                last_transaction = session.query(Transaction).filter_by(
                    account_id=account.id
                ).order_by(Transaction.timestamp.desc()).first()
                
                last_updated = last_transaction.timestamp if last_transaction else account.last_updated
                
                accounts_data.append({
                    'id': account.id,
                    'name': account.name,
                    'currency': account.currency,
                    'balance': account.balance,
                    'balance_usd': account.balance_usd,
                    'last_updated': last_updated.isoformat() if last_updated else None
                })
                total_balance_usd += account.balance_usd
            
            return {
                'success': True,
                'accounts': accounts_data,
                'total_balance_usd': round(total_balance_usd, 2)
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
        finally:
            session.close()

    def get_balance_history(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            session = create_session()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            transactions = session.query(Transaction).join(Account).order_by(Transaction.timestamp).all()
            
            if not transactions:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
                accounts = session.query(Account).all()
                total_balance_usd = sum(convert_to_usd(account.balance, account.currency) for account in accounts)
                
                if total_balance_usd > 0:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–∞–∫ –æ–¥–Ω—É —Ç–æ—á–∫—É
                    today = datetime.utcnow().strftime('%Y-%m-%d')
                    return {
                        'success': True,
                        'history': [{'date': today, 'balance': round(total_balance_usd, 2)}]
                    }
                else:
                    return {
                        'success': True,
                        'history': []
                    }
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É –≤—Å–µ—Ö –¥–∞—Ç —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
            all_dates = sorted(list(set(t.timestamp.strftime('%Y-%m-%d') for t in transactions)))
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
            balance_history = {}
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
            last_known_balances = {}
            
            for date_str in all_dates:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                start_of_day = date_obj.replace(hour=0, minute=0, second=0, microsecond=0)
                end_of_day = date_obj.replace(hour=23, minute=59, second=59, microsecond=999999)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                day_transactions = session.query(Transaction).filter(
                    Transaction.timestamp >= start_of_day,
                    Transaction.timestamp <= end_of_day
                ).order_by(Transaction.timestamp).all()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è —Å—á–µ—Ç–æ–≤ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                for transaction in day_transactions:
                    last_known_balances[transaction.account_id] = transaction.new_balance
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USD –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                total_usd = 0
                for account in session.query(Account).all():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ 0, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –±—ã–ª–æ
                    balance = last_known_balances.get(account.id, 0)
                    total_usd += convert_to_usd(balance, account.currency)
                
                balance_history[date_str] = round(total_usd, 2)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            history_data = [
                {'date': date, 'balance': balance} 
                for date, balance in sorted(balance_history.items())
            ]
            
            return {
                'success': True,
                'history': history_data
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
        finally:
            session.close()

    def create_total_balance_history_chart(self):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –≤ USD"""
        try:
            import matplotlib.pyplot as plt
            import matplotlib.dates as mdates
            import io
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ get_balance_history
            history_result = self.get_balance_history()
            
            if not history_result['success'] or not history_result['history']:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            history_data = history_result['history']
            
            if len(history_data) == 0:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ datetime –æ–±—ä–µ–∫—Ç—ã
            dates = [datetime.strptime(item['date'], '%Y-%m-%d') for item in history_data]
            balances = [item['balance'] for item in history_data]
            
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
            ax.plot(dates, balances, 'o-', linewidth=2, markersize=6, color='#36A2EB')
            ax.fill_between(dates, balances, alpha=0.3, color='#36A2EB')
            
            ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–≤—Å–µ —Å—á–µ—Ç–∞)', fontsize=16, fontweight='bold')
            ax.set_ylabel('–û–±—â–∏–π –±–∞–ª–∞–Ω—Å (USD)', fontsize=12)
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.grid(True, alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            current_total = balances[-1] if balances else 0
            
            ax.text(0.02, 0.98, f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_total:,.2f}', 
                   transform=ax.transAxes, fontsize=12, fontweight='bold',
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7),
                   verticalalignment='top')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            return img_buffer
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—â–µ–π –¥–∏–Ω–∞–º–∏–∫–∏: {e}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                plt.close('all')
            except:
                pass
            return None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
finance_tracker_core = FinanceTrackerCore() 
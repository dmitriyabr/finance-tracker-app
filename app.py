from flask import Flask, render_template, request, jsonify
import os
import json
import re
from datetime import datetime
import requests
from google.cloud import vision
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class FinanceTracker:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.data_file = 'finance_data.json'
        self.load_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Vision API
        try:
            # –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ credentials
            import os
            if not os.environ.get('GOOGLE_APPLICATION_CREDENTIALS'):
                os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = os.path.join(
                    os.path.dirname(os.path.abspath(__file__)), 
                    'google-credentials.json'
                )
            
            self.vision_client = vision.ImageAnnotatorClient()
            logger.info("‚úÖ Google Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Vision: {e}")
            self.vision_client = None
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
        self.currency_patterns = {
            'RUB': [
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*‚ÇΩ',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*–†',  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*—Ä—É–±',
                r'(\d{1,3}(?:\s\d{3})*(?:,\d{2})?)\s*—Ä—É–±–ª'
            ],
            'USD': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*\$',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*USD',
                r'\$(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'EUR': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*‚Ç¨',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*EUR',
                r'‚Ç¨(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)'
            ],
            'AED': [
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*AED',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*–¥–∏—Ä—Ö–∞–º',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*ÿØ\.ÿ•'
            ],
            'IDR': [
                r'Rp\s*(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)',
                r'(\d{1,3}(?:,\d{3})*(?:\.\d{3})?)\s*Rp',
                r'(\d{1,3}(?:\s\d{3})*(?:\.\d{3})?)\s*—Ä—É–ø–∏–π'
            ]
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        self.balance_keywords = [
            'balance', 'total', 'available', 'current', 'main', 'cash',
            '–±–∞–ª–∞–Ω—Å', '–¥–æ—Å—Ç—É–ø–Ω–æ', '–æ—Å–Ω–æ–≤–Ω–æ–π', '—Ç–µ–∫—É—â–∏–π', '–æ–±—â–∏–π', '–Ω–∞–ª–∏—á–Ω—ã–µ'
        ]

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.data = {'accounts': {}, 'total_balance_usd': 0, 'last_updated': None}
        else:
            self.data = {'accounts': {}, 'total_balance_usd': 0, 'last_updated': None}
            logger.info("üìÅ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def extract_balance_from_text(self, text_lines):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        balances = []
        
        for text in text_lines:
            text_lower = text.lower()
            
            # –ò—â–µ–º –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º
            for currency, patterns in self.currency_patterns.items():
                for pattern in patterns:
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    if matches:
                        for match in matches:
                            # –û—á–∏—â–∞–µ–º —á–∏—Å–ª–æ
                            clean_number = match.replace(' ', '').replace(',', '')
                            
                            try:
                                float(clean_number)
                                balances.append({
                                    'value': clean_number,
                                    'currency': currency,
                                    'original_text': text,
                                    'pattern': pattern
                                })
                            except ValueError:
                                continue
            
            # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            for keyword in self.balance_keywords:
                if keyword in text_lower:
                    for currency, patterns in self.currency_patterns.items():
                        for pattern in patterns:
                            matches = re.findall(pattern, text, re.IGNORECASE)
                            if matches:
                                for match in matches:
                                    clean_number = match.replace(' ', '').replace(',', '')
                                    try:
                                        float(clean_number)
                                        balances.append({
                                            'value': clean_number,
                                            'currency': currency,
                                            'original_text': text,
                                            'keyword': keyword,
                                            'pattern': pattern
                                        })
                                    except ValueError:
                                        continue
        
        return balances

    def fix_russian_number_format(self, text, currency):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∏—Å–µ–ª (–∑–∞–ø—è—Ç–∞—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤)"""
        if currency == 'RUB':
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "250 288,30" –∏–ª–∏ "250288,30"
            # –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∏—Å–µ–ª: —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç–∞—è, 2 —Ü–∏—Ñ—Ä—ã
            russian_pattern = r'(\d{1,3}(?:\s\d{3})*),(\d{2})'
            match = re.search(russian_pattern, text)
            
            if match:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—É—é –∏ –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç–∏
                whole_part = match.group(1).replace(' ', '')  # "250288"
                decimal_part = match.group(2)  # "30"
                
                # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
                correct_number = f"{whole_part}.{decimal_part}"
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ
                    float(correct_number)
                    return correct_number
                except ValueError:
                    pass
        
        return None

    def process_image(self, image_content):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision"""
        if not self.vision_client:
            return {'success': False, 'error': 'Google Vision –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = vision.Image(content=image_content)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            response = self.vision_client.text_detection(image=image)
            texts = response.text_annotations
            
            if not texts:
                return {'success': False, 'error': '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            full_text = texts[0].description
            text_lines = full_text.split('\n')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.extract_balance_from_text(text_lines)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π
            if balances:
                for balance in balances:
                    if balance['currency'] == 'RUB':
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞
                        corrected_number = self.fix_russian_number_format(
                            balance['original_text'], 
                            balance['currency']
                        )
                        if corrected_number:
                            balance['value'] = corrected_number
                            balance['corrected'] = True
            
            if balances:
                # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é)
                main_balance = max(balances, key=lambda x: float(x['value']))
                
                return {
                    'success': True,
                    'main_balance': main_balance,
                    'all_balances': balances,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
            else:
                return {
                    'success': False,
                    'balance': None,
                    'text_lines': text_lines,
                    'full_text': full_text
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'balance': None,
                'error': str(e)
            }

    def identify_account(self, balance_data, image_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç—Ç–æ —Å—á–µ—Ç –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ –≤–∞–ª—é—Ç–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        currency = balance_data['currency']
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—á–µ—Ç —Å —Ç–∞–∫–æ–π –≤–∞–ª—é—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        for account_id, account in self.data['accounts'].items():
            if account['currency'] == currency:
                return account_id
        
        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—á–µ—Ç
        account_id = f"account_{len(self.data['accounts']) + 1}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ –≤–∞–ª—é—Ç–µ
        account_names = {
            'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å—á–µ—Ç',
            'USD': '–î–æ–ª–ª–∞—Ä–æ–≤—ã–π —Å—á–µ—Ç',
            'EUR': '–ï–≤—Ä–æ —Å—á–µ—Ç',
            'AED': '–î–∏—Ä—Ö–∞–º–æ–≤—ã–π —Å—á–µ—Ç',
            'IDR': '–†—É–ø–∏–µ–≤—ã–π —Å—á–µ—Ç'
        }
        
        account_name = account_names.get(currency, f'–°—á–µ—Ç –≤ {currency}')
        
        self.data['accounts'][account_id] = {
            'name': account_name,
            'currency': currency,
            'balance': 0,
            'balance_usd': 0,
            'last_updated': None,
            'transactions': []
        }
        
        return account_id

    def update_account_balance(self, account_id, balance_data, source='image_upload'):
        """–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ (–Ω–µ —Å—É–º–º–∏—Ä—É–µ–º, –∞ –∑–∞–º–µ–Ω—è–µ–º)"""
        timestamp = datetime.now().isoformat()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç
        account = self.data['accounts'][account_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        old_balance = account['balance']
        account['balance'] = float(balance_data['value'])
        account['last_updated'] = timestamp
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã
        account['balance_usd'] = self.convert_to_usd(account['balance'], account['currency'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = {
            'id': len(account['transactions']) + 1,
            'timestamp': timestamp,
            'old_balance': old_balance,
            'new_balance': account['balance'],
            'change': account['balance'] - old_balance,
            'source': source,
            'original_text': balance_data.get('original_text', '')
        }
        
        account['transactions'].append(transaction)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        self.update_total_balance_usd()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_data()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ {account_id}: {account['balance']} {account['currency']} (${account['balance_usd']:.2f})")
        return transaction

    def convert_to_usd(self, amount, currency):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É –≤ –¥–æ–ª–ª–∞—Ä—ã"""
        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API)
        conversion_rates = {
            'RUB': 0.011,  # 1 RUB = 0.011 USD
            'USD': 1.0,    # 1 USD = 1 USD
            'EUR': 1.09,   # 1 EUR = 1.09 USD
            'AED': 0.27,   # 1 AED = 0.27 USD
            'IDR': 0.000065 # 1 IDR = 0.000065 USD
        }
        
        if currency in conversion_rates:
            return amount * conversion_rates[currency]
        else:
            return amount  # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å

    def update_total_balance_usd(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å
        if 'total_balance_usd' in self.data:
            self.data['previous_total_balance_usd'] = self.data['total_balance_usd']
        
        total_usd = 0
        for account in self.data['accounts'].values():
            total_usd += account['balance_usd']
        
        self.data['total_balance_usd'] = round(total_usd, 2)
        self.data['last_updated'] = datetime.now().isoformat()

    def get_accounts_summary(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        total_change = 0
        if self.data.get('previous_total_balance_usd'):
            total_change = self.data['total_balance_usd'] - self.data['previous_total_balance_usd']
        
        return {
            'accounts': self.data['accounts'],
            'total_balance_usd': self.data['total_balance_usd'],
            'total_balance_change': round(total_change, 2),
            'last_updated': self.data['last_updated'],
            'total_count': len(self.data['accounts'])
        }

    def get_account_history(self, account_id, limit=20):
        """–ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Å—á–µ—Ç—É"""
        if account_id in self.data['accounts']:
            account = self.data['accounts'][account_id]
            return {
                'account': account,
                'transactions': account['transactions'][-limit:]
            }
        return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
finance_tracker = FinanceTracker()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    accounts_data = finance_tracker.get_accounts_summary()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON –¥–ª—è JavaScript
    import json
    accounts_json = json.dumps(accounts_data, ensure_ascii=False)
    
    return render_template('index.html', 
                         accounts=accounts_data['accounts'],
                         total_balance_usd=accounts_data['total_balance_usd'],
                         total_balance_change=accounts_data['total_balance_change'],
                         last_updated=accounts_data['last_updated'],
                         total_count=accounts_data['total_count'],
                         accounts_json=accounts_json)

@app.route('/api/accounts', methods=['GET'])
def get_accounts():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Å—á–µ—Ç–∞–º"""
    return jsonify(finance_tracker.get_accounts_summary())

@app.route('/api/process_image', methods=['POST'])
def process_image():
    """API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if 'image' not in request.files:
            return jsonify({'success': False, 'error': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'})
        
        image_file = request.files['image']
        if image_file.filename == '':
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_content = image_file.read()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Google Vision
        result = finance_tracker.process_image(image_content)
        
        if result['success']:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç—Ç–æ —Å—á–µ—Ç
            account_id = finance_tracker.identify_account(
                result['main_balance'], 
                result['full_text']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
            transaction = finance_tracker.update_account_balance(
                account_id,
                result['main_balance'], 
                source='image_upload'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            accounts_data = finance_tracker.get_accounts_summary()
            
            return jsonify({
                'success': True,
                'account_id': account_id,
                'transaction': transaction,
                'accounts': accounts_data
            })
        else:
            return jsonify(result)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/account/<account_id>/history', methods=['GET'])
def get_account_history(account_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Å—á–µ—Ç—É"""
    history = finance_tracker.get_account_history(account_id)
    if history:
        return jsonify(history)
    else:
        return jsonify({'success': False, 'error': '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Finance Tracker...")
    app.run(debug=True, host='0.0.0.0', port=5001) 